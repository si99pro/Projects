{"version":3,"file":"static/js/915.7aaf68dd.chunk.js","mappings":"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","sources":["components/NotificationItem.js","pages/NotificationsPage.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n// src/components/NotificationItem.js\r\nimport React from 'react';\r\nimport {\r\n    Paper, Box, Typography, Avatar, IconButton, Tooltip, Chip, Link as MuiLink,\r\n    alpha, useTheme\r\n} from '@mui/material';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { motion } from 'framer-motion';\r\n\r\n// Icons (Import only those needed here)\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport MarkAsUnreadIcon from '@mui/icons-material/MarkAsUnread';\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\n\r\nconst NotificationItem = React.memo(({\r\n    notification,\r\n    isAdmin,\r\n    onMarkReadToggle,\r\n    onNotificationClick,\r\n    onDeleteRequest\r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    // --- Calculations (Derived from props) ---\r\n    const timeAgo = notification.timestamp?.toDate()\r\n        ? formatDistanceToNow(notification.timestamp.toDate(), { addSuffix: true })\r\n        : 'Just now';\r\n\r\n    const senderDisplayName = notification.senderName || 'System Update';\r\n    const senderDetail = notification.senderStudentId\r\n        ? `${senderDisplayName} (${notification.senderStudentId})`\r\n        : senderDisplayName;\r\n    const senderInitial = senderDisplayName?.charAt(0).toUpperCase() || 'S';\r\n\r\n    // --- Styling based on state ---\r\n    const isUnread = !notification.read;\r\n    const itemBackgroundColor = isUnread\r\n        ? alpha(theme.palette.primary.main, 0.07) // Slightly more visible tint\r\n        : theme.palette.background.paper;\r\n    const hoverBackgroundColor = isUnread\r\n        ? alpha(theme.palette.primary.main, 0.12)\r\n        : alpha(theme.palette.action.hover, 0.04); // Use theme's hover alpha\r\n\r\n    const canItemBeClicked = isUnread || notification.link;\r\n\r\n    // --- Event Handlers ---\r\n    // Prevent accidental double-clicks or propagation issues\r\n    const handleMainClick = (e) => {\r\n        if (canItemBeClicked) {\r\n            onNotificationClick(notification);\r\n        }\r\n    };\r\n\r\n    const handleLinkClick = (e) => {\r\n        e.stopPropagation(); // Don't trigger main click if clicking the dedicated link button\r\n        onNotificationClick(notification); // Let the parent handler decide action based on link\r\n    };\r\n\r\n    const handleToggleReadClick = (e) => {\r\n        e.stopPropagation();\r\n        onMarkReadToggle(notification.id, notification.read);\r\n    };\r\n\r\n    const handleDeleteClick = (e) => {\r\n        e.stopPropagation();\r\n        onDeleteRequest(notification.id);\r\n    };\r\n\r\n    return (\r\n        // motion.div enables animations via AnimatePresence in the parent\r\n        <motion.div\r\n            layout // Animates layout changes (e.g., when an item is removed)\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, x: -30, transition: { duration: 0.25 } }} // Smoother exit animation\r\n            transition={{ type: 'spring', stiffness: 260, damping: 25 }} // Spring animation for enter/update\r\n        >\r\n            <Paper\r\n                variant=\"outlined\"\r\n                sx={{\r\n                    p: 1.75, // Consistent padding\r\n                    mb: 1.5,\r\n                    display: 'flex',\r\n                    gap: 2,\r\n                    alignItems: 'flex-start',\r\n                    backgroundColor: itemBackgroundColor,\r\n                    borderLeft: `3px solid ${isUnread ? theme.palette.primary.main : 'transparent'}`, // Unread indicator bar\r\n                    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-left-color'], {\r\n                        duration: theme.transitions.duration.short, // Use theme duration\r\n                    }),\r\n                    cursor: canItemBeClicked ? 'pointer' : 'default',\r\n                    '&:hover': {\r\n                        boxShadow: theme.shadows[3], // Slightly more pronounced hover shadow\r\n                        backgroundColor: hoverBackgroundColor,\r\n                    },\r\n                }}\r\n                onClick={handleMainClick}\r\n            >\r\n                {/* Avatar */}\r\n                <Avatar\r\n                    sx={{\r\n                        bgcolor: isUnread ? 'primary.main' : 'grey.500',\r\n                        width: 40,\r\n                        height: 40,\r\n                        mt: 0.25, // Align better with text baseline\r\n                        fontSize: '1.1rem',\r\n                        transition: 'background-color 0.3s ease',\r\n                    }}\r\n                >\r\n                    {senderInitial}\r\n                </Avatar>\r\n\r\n                {/* Content Area */}\r\n                <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', pt: 0.25 }}>\r\n                    <Typography\r\n                        variant=\"body1\"\r\n                        sx={{\r\n                            fontWeight: isUnread ? 600 : 400, // Bolder if unread\r\n                            mb: 0.5, // Space between title and message\r\n                            lineHeight: 1.4, // Improve readability\r\n                            // Allow clicking title/message to trigger main onClick\r\n                            pointerEvents: 'none', // Let parent Paper handle click\r\n                        }}\r\n                    >\r\n                        {notification.title || 'Notification'}\r\n                    </Typography>\r\n\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        color=\"text.secondary\"\r\n                        sx={{ mb: 1, pointerEvents: 'none', lineHeight: 1.5 }}\r\n                    >\r\n                        {notification.message || \"\"}\r\n                    </Typography>\r\n\r\n                    {/* Metadata: Sender, Time, Category */}\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, flexWrap: 'wrap' }}>\r\n                         {/* Group sender + time */}\r\n                         <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                             <Typography variant=\"caption\" color=\"text.secondary\" sx={{ pointerEvents: 'none' }}>\r\n                                 From: {senderDetail}\r\n                             </Typography>\r\n                             <Typography variant=\"caption\" color={isUnread ? 'primary.dark' : 'text.disabled'} sx={{ pointerEvents: 'none', fontWeight: isUnread ? 500 : 400 }}>\r\n                                 • {timeAgo}\r\n                             </Typography>\r\n                         </Box>\r\n\r\n                        {notification.category && (\r\n                            <Chip\r\n                                size=\"small\"\r\n                                label={notification.category}\r\n                                sx={{\r\n                                    height: '20px',\r\n                                    fontSize: '0.7rem',\r\n                                    pointerEvents: 'none',\r\n                                    bgcolor: alpha(theme.palette.secondary.main, 0.1), // Use secondary color tint for chip\r\n                                    color: 'secondary.dark',\r\n                                    fontWeight: 500,\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </Box>\r\n                </Box>\r\n\r\n                {/* Actions Area - Consistent spacing and alignment */}\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', gap: 0.5, ml: 'auto', pt: 0.5 }}>\r\n                     {/* Link Button (only if link exists) */}\r\n                     {notification.link && (\r\n                        <Tooltip title=\"Open Link\" placement=\"left\">\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={handleLinkClick}\r\n                                aria-label=\"Open link\"\r\n                                sx={{ color: 'primary.main', '&:hover': { bgcolor: alpha(theme.palette.primary.main, 0.1)} }}\r\n                            >\r\n                                <OpenInNewIcon sx={{ fontSize: '1.1rem' }} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    )}\r\n                    {/* Mark Read/Unread Button */}\r\n                    <Tooltip title={isUnread ? \"Mark as Read\" : \"Mark as Unread\"} placement=\"left\">\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={handleToggleReadClick}\r\n                            aria-label={isUnread ? \"Mark as read\" : \"Mark as unread\"}\r\n                            sx={{\r\n                                color: isUnread ? 'primary.main' : 'text.secondary',\r\n                                '&:hover': { bgcolor: alpha(isUnread ? theme.palette.primary.main : theme.palette.action.active, 0.1)}\r\n                            }}\r\n                        >\r\n                            {isUnread\r\n                                ? <CheckCircleOutlineIcon sx={{ fontSize: '1.1rem' }} />\r\n                                : <MarkAsUnreadIcon sx={{ fontSize: '1.1rem' }} />\r\n                            }\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    {/* Delete Button (Admin only) */}\r\n                    {isAdmin && (\r\n                        <Tooltip title=\"Delete Notification\" placement=\"left\">\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={handleDeleteClick}\r\n                                color=\"error\"\r\n                                aria-label=\"Delete notification\"\r\n                                sx={{ '&:hover': { bgcolor: alpha(theme.palette.error.main, 0.15) } }}\r\n                            >\r\n                                <DeleteOutlineIcon sx={{ fontSize: '1.1rem' }} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    )}\r\n                </Box>\r\n            </Paper>\r\n        </motion.div>\r\n    );\r\n}); // Wrap with React.memo\r\n\r\nexport default NotificationItem;","/* eslint-disable no-unused-vars */\r\n// src/pages/NotificationsPage.js\r\nimport React, { useState, useEffect, useCallback, Fragment } from 'react';\r\nimport { db } from '../firebase'; // Adjust path if needed\r\nimport {\r\n    collection, query, orderBy, limit, getDocs, doc, setDoc,\r\n    serverTimestamp, startAfter, deleteDoc\r\n} from 'firebase/firestore';\r\n// --- CORRECTED IMPORT PATH FOR useAuth ---\r\nimport { useAuth } from '../auth/AuthContext';\r\n// --- END CORRECTION ---\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Container, Typography, Box, CircularProgress, Button, Alert, Stack,\r\n    Paper, Skeleton, Dialog, DialogActions, DialogContent,\r\n    DialogContentText, DialogTitle, useTheme, alpha\r\n} from '@mui/material';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\n\r\n// Import the extracted component\r\nimport NotificationItem from '../components/NotificationItem'; // Adjust path if needed\r\n\r\n// Icons (Only those needed directly in this page)\r\nimport NotificationsNoneIcon from '@mui/icons-material/NotificationsNone'; // Empty state\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever'; // Delete confirmation icon\r\n\r\nconst NOTIFICATIONS_PER_PAGE = 10;\r\n\r\n// --- Skeleton Component (Can stay here or move to its own file) ---\r\nconst NotificationSkeleton = () => (\r\n    <Paper variant=\"outlined\" sx={{ p: 1.75, mb: 1.5, display: 'flex', gap: 2, alignItems: 'center' }}>\r\n        <Skeleton variant=\"circular\" width={40} height={40} sx={{ mt: 0.25 }}/>\r\n        <Box sx={{ flexGrow: 1, pt: 0.25 }}>\r\n            <Skeleton variant=\"text\" width=\"85%\" sx={{ mb: 0.75, height: '1.4rem' }} />\r\n            <Skeleton variant=\"text\" width=\"65%\" sx={{ mb: 1.25, height: '1rem' }}/>\r\n            <Skeleton variant=\"text\" width=\"40%\" sx={{ height: '0.8rem' }}/>\r\n        </Box>\r\n        <Stack direction=\"column\" spacing={1} sx={{ ml: 'auto', pt: 0.5 }}>\r\n            <Skeleton variant=\"circular\" width={28} height={28} />\r\n            <Skeleton variant=\"circular\" width={28} height={28} />\r\n        </Stack>\r\n    </Paper>\r\n);\r\n\r\n// --- Main Page Component ---\r\nfunction NotificationsPage() {\r\n    // Use the correctly imported useAuth hook\r\n    const { user, isAdmin, authLoading } = useAuth(); // Ensure 'authLoading' is used if needed\r\n    const userId = user?.uid;\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n\r\n    // State remains largely the same\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [lastVisible, setLastVisible] = useState(null);\r\n    const [hasMore, setHasMore] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n    const [notificationToDelete, setNotificationToDelete] = useState(null);\r\n\r\n    // --- Data Fetching (Identical logic, stable references are good) ---\r\n    const fetchInitialNotifications = useCallback(async () => {\r\n        // Added check for authLoading - don't fetch if auth isn't ready\r\n        if (authLoading) { setLoading(true); return; }\r\n        if (!userId) { setLoading(false); setNotifications([]); setHasMore(false); return; }\r\n\r\n        setLoading(true); setError(null); setLastVisible(null); setHasMore(true);\r\n        setNotifications([]); // Clear existing for a clean load with skeletons\r\n\r\n        try {\r\n            const notificationsRef = collection(db, 'users', userId, 'notifications');\r\n            const q = query(notificationsRef, orderBy('timestamp', 'desc'), limit(NOTIFICATIONS_PER_PAGE));\r\n            const snapshots = await getDocs(q);\r\n            const fetched = snapshots.docs.map(d => ({ id: d.id, ...d.data() }));\r\n            setNotifications(fetched);\r\n            setLastVisible(snapshots.docs[snapshots.docs.length - 1] || null);\r\n            setHasMore(fetched.length === NOTIFICATIONS_PER_PAGE);\r\n        } catch (err) {\r\n            console.error(\"Error fetching initial notifications:\", err);\r\n            setError(\"Failed to load notifications. Please try again later.\");\r\n            setNotifications([]); setHasMore(false);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [userId, authLoading]); // Add authLoading as dependency\r\n\r\n    const fetchMoreNotifications = useCallback(async () => {\r\n        // No need to check authLoading here as initial load would have waited\r\n        if (!userId || loadingMore || !hasMore || !lastVisible) return;\r\n        setLoadingMore(true); setError(null);\r\n        try {\r\n            const notificationsRef = collection(db, 'users', userId, 'notifications');\r\n            const q = query(notificationsRef, orderBy('timestamp', 'desc'), startAfter(lastVisible), limit(NOTIFICATIONS_PER_PAGE));\r\n            const snapshots = await getDocs(q);\r\n            const newNotifications = snapshots.docs.map(d => ({ id: d.id, ...d.data() }));\r\n            setNotifications(prev => [...prev, ...newNotifications]);\r\n            setLastVisible(snapshots.docs[snapshots.docs.length - 1] || null);\r\n            setHasMore(newNotifications.length === NOTIFICATIONS_PER_PAGE);\r\n        } catch (err) {\r\n            console.error(\"Error fetching more notifications:\", err);\r\n            setError(\"Failed to load more notifications.\");\r\n        } finally {\r\n            setLoadingMore(false);\r\n        }\r\n    }, [userId, loadingMore, hasMore, lastVisible]); // Dependencies for fetching more\r\n\r\n    useEffect(() => {\r\n        // Fetch initial notifications only when userId is available and auth check is done\r\n         fetchInitialNotifications();\r\n    }, [fetchInitialNotifications]); // Effect runs when fetchInitialNotifications definition changes\r\n\r\n    // --- Interaction Handlers (Passed down to NotificationItem) ---\r\n    const handleMarkReadToggle = useCallback(async (notificationId, currentReadState) => {\r\n        if (!userId || !notificationId) return;\r\n        const notificationRef = doc(db, 'users', userId, 'notifications', notificationId);\r\n        const newState = !currentReadState;\r\n\r\n        // Optimistic UI update\r\n        setNotifications(prev => prev.map(n =>\r\n            n.id === notificationId ? { ...n, read: newState } : n\r\n        ));\r\n\r\n        try {\r\n            await setDoc(notificationRef, {\r\n                read: newState,\r\n                readTimestamp: newState ? serverTimestamp() : null\r\n            }, { merge: true });\r\n        } catch (error) {\r\n            console.error(\"Error updating notification read state:\", error);\r\n            setError(\"Couldn't update notification status. Please try again.\");\r\n            // Revert on error\r\n            setNotifications(prev => prev.map(n =>\r\n                n.id === notificationId ? { ...n, read: currentReadState } : n\r\n            ));\r\n        }\r\n    }, [userId]); // Dependency: userId\r\n\r\n    const handleNotificationClick = useCallback((notification) => {\r\n        if (!notification.read) {\r\n            handleMarkReadToggle(notification.id, false);\r\n        }\r\n        if (notification.link && typeof notification.link === 'string' && notification.link.trim() !== '') {\r\n            try {\r\n                if (notification.link.startsWith('http')) {\r\n                    window.open(notification.link, '_blank', 'noopener,noreferrer');\r\n                } else if (notification.link.startsWith('/')) {\r\n                    navigate(notification.link);\r\n                } else {\r\n                    console.warn(\"Unsupported link format:\", notification.link);\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Error navigating/opening link:\", notification.link, e);\r\n                setError(`Could not open the requested link.`);\r\n            }\r\n        }\r\n    }, [navigate, handleMarkReadToggle]); // Dependencies: navigate, handleMarkReadToggle\r\n\r\n    // --- Delete Handling with Dialog ---\r\n    const handleDeleteRequest = useCallback((notificationId) => {\r\n        setNotificationToDelete(notificationId);\r\n        setDeleteDialogOpen(true);\r\n    }, []);\r\n\r\n    const handleCloseDeleteDialog = useCallback(() => {\r\n        setDeleteDialogOpen(false);\r\n        setTimeout(() => setNotificationToDelete(null), 300); // Allow fade out\r\n    }, []);\r\n\r\n    const handleConfirmDelete = useCallback(async () => {\r\n        if (!userId || !notificationToDelete || !isAdmin) { // Added safeguard check\r\n             console.error(\"Delete prevented: Invalid state.\");\r\n             setError(\"Could not delete notification due to an internal error.\");\r\n             handleCloseDeleteDialog();\r\n             return;\r\n        }\r\n\r\n        const notificationId = notificationToDelete;\r\n        setDeleteDialogOpen(false);\r\n        const originalNotifications = notifications; // Keep original state for potential rollback\r\n\r\n        // Optimistic UI update for smoother UX\r\n        setNotifications(prev => prev.filter(n => n.id !== notificationId));\r\n        setNotificationToDelete(null);\r\n\r\n        const notificationRef = doc(db, 'users', userId, 'notifications', notificationId);\r\n        try {\r\n            await deleteDoc(notificationRef);\r\n            // Success! UI is already updated.\r\n        } catch (error) {\r\n            console.error(\"Error deleting notification:\", error);\r\n            setError(\"Failed to delete the notification. Please try again.\");\r\n            // Rollback UI on error\r\n            setNotifications(originalNotifications);\r\n        }\r\n    }, [userId, isAdmin, notificationToDelete, notifications, handleCloseDeleteDialog]);\r\n\r\n\r\n    // --- Main Page Render ---\r\n\r\n    // Show global loading if auth is still checking\r\n    if (authLoading) {\r\n         return (\r\n            <Container maxWidth=\"md\" sx={{ py: 4, textAlign: 'center' }}>\r\n                 <CircularProgress />\r\n                 <Typography sx={{ mt: 2 }}>Loading user data...</Typography>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    // Show message if not logged in (after auth check)\r\n    if (!userId) {\r\n        return (\r\n            <Container maxWidth=\"md\" sx={{ py: 4, textAlign: 'center' }}>\r\n                 <Alert severity=\"warning\" variant=\"outlined\">Please log in to view your notifications.</Alert>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    // Render actual page content once auth is done and user exists\r\n    return (\r\n        <Container maxWidth=\"md\" sx={{ py: { xs: 3, sm: 4 } }}>\r\n            <Typography variant=\"h4\" component=\"h1\" sx={{ mb: { xs: 2, sm: 3 }, fontWeight: 700, color: 'text.primary' }}>\r\n                Notifications\r\n            </Typography>\r\n\r\n            {/* Sticky Error Alert */}\r\n            <AnimatePresence>\r\n                {error && (\r\n                    <motion.div\r\n                        initial={{ opacity: 0, y: -20 }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: -20, transition: { duration: 0.2 } }}\r\n                        style={{ position: 'sticky', top: theme.spacing(1.5), zIndex: theme.zIndex.appBar + 1, marginBottom: theme.spacing(2) }}\r\n                    >\r\n                        <Alert severity=\"error\" onClose={() => setError(null)} variant=\"filled\" sx={{ width: '100%' }}>\r\n                            {error}\r\n                        </Alert>\r\n                    </motion.div>\r\n                )}\r\n            </AnimatePresence>\r\n\r\n            {/* Content Area */}\r\n            {loading ? (\r\n                // Skeletons for initial notification load\r\n                <Stack spacing={0} sx={{ mt: 2 }}>\r\n                    {[...Array(NOTIFICATIONS_PER_PAGE / 2)].map((_, index) => <NotificationSkeleton key={`skeleton-${index}`} />)}\r\n                </Stack>\r\n            ) : notifications.length === 0 ? (\r\n                 // Empty State\r\n                 <Box sx={{ textAlign: 'center', mt: { xs: 6, sm: 10 }, color: 'text.secondary' }}>\r\n                    <NotificationsNoneIcon sx={{ fontSize: '5rem', mb: 2, color: theme.palette.grey[400] }} />\r\n                    <Typography variant=\"h6\" component=\"p\" sx={{ mb: 1, fontWeight: 500 }}>All caught up!</Typography>\r\n                    <Typography>You have no notifications right now.</Typography>\r\n                 </Box>\r\n            ) : (\r\n                 // Notifications List\r\n                 <Box sx={{ mt: 2 }}>\r\n                    <AnimatePresence initial={false}>\r\n                         <Stack spacing={0}> {/* Let NotificationItem margin handle spacing */}\r\n                            {notifications.map((notification) => (\r\n                                <NotificationItem\r\n                                    key={notification.id}\r\n                                    notification={notification}\r\n                                    isAdmin={isAdmin} // Pass admin status down\r\n                                    onMarkReadToggle={handleMarkReadToggle}\r\n                                    onNotificationClick={handleNotificationClick}\r\n                                    onDeleteRequest={handleDeleteRequest} // Pass delete handler\r\n                                />\r\n                            ))}\r\n                        </Stack>\r\n                    </AnimatePresence>\r\n\r\n                    {/* Load More Button */}\r\n                    {hasMore && (\r\n                        <Box sx={{ textAlign: 'center', my: 4 }}>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={fetchMoreNotifications}\r\n                                disabled={loadingMore}\r\n                                startIcon={loadingMore ? <CircularProgress size={20} color=\"inherit\" /> : null}\r\n                                sx={{ textTransform: 'none', borderRadius: '20px', px: 3 }}\r\n                            >\r\n                                {loadingMore ? 'Loading More...' : 'Load More Notifications'}\r\n                            </Button>\r\n                        </Box>\r\n                    )}\r\n                    {!hasMore && notifications.length > 0 && !loadingMore && (\r\n                         <Typography variant=\"caption\" display=\"block\" textAlign=\"center\" color=\"text.disabled\" sx={{ my: 4 }}>\r\n                           End of notifications.\r\n                         </Typography>\r\n                    )}\r\n                 </Box>\r\n            )}\r\n\r\n            {/* Delete Confirmation Dialog */}\r\n             <Dialog\r\n                open={deleteDialogOpen}\r\n                onClose={handleCloseDeleteDialog}\r\n                aria-labelledby=\"delete-confirm-title\"\r\n                PaperProps={{ sx: { borderRadius: 2 } }}\r\n            >\r\n                <DialogTitle id=\"delete-confirm-title\" sx={{ display: 'flex', alignItems: 'center', borderBottom: `1px solid ${theme.palette.divider}`, pb: 1.5 }}>\r\n                    <DeleteForeverIcon sx={{ mr: 1.5, color: 'error.main' }}/>\r\n                    Confirm Deletion\r\n                </DialogTitle>\r\n                <DialogContent sx={{ pt: '20px !important' }}>\r\n                    <DialogContentText>\r\n                        Are you sure you want to permanently delete this notification? This action cannot be undone.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ p: 2 }}>\r\n                    <Button onClick={handleCloseDeleteDialog} sx={{ textTransform: 'none', color: 'text.secondary' }}>Cancel</Button>\r\n                    <Button onClick={handleConfirmDelete} color=\"error\" variant=\"contained\" disableElevation sx={{ textTransform: 'none' }} autoFocus>\r\n                        Delete Notification\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NotificationsPage;"],"names":["React","_ref","_notification$timesta","notification","isAdmin","onMarkReadToggle","onNotificationClick","onDeleteRequest","theme","useTheme","timeAgo","timestamp","toDate","formatDistanceToNow","addSuffix","senderDisplayName","senderName","senderDetail","senderStudentId","senderInitial","charAt","toUpperCase","isUnread","read","itemBackgroundColor","alpha","palette","primary","main","background","paper","hoverBackgroundColor","action","hover","canItemBeClicked","link","_jsx","motion","div","layout","initial","opacity","y","animate","exit","x","transition","duration","type","stiffness","damping","children","_jsxs","Paper","variant","sx","p","mb","display","gap","alignItems","backgroundColor","borderLeft","transitions","create","short","cursor","boxShadow","shadows","onClick","e","Avatar","bgcolor","width","height","mt","fontSize","Box","flexGrow","flexDirection","pt","Typography","fontWeight","lineHeight","pointerEvents","title","color","message","flexWrap","category","Chip","size","label","secondary","justifyContent","ml","Tooltip","placement","IconButton","stopPropagation","OpenInNewIcon","id","active","CheckCircleOutlineIcon","MarkAsUnreadIcon","error","DeleteOutlineIcon","NotificationSkeleton","Skeleton","Stack","direction","spacing","user","authLoading","useAuth","userId","uid","navigate","useNavigate","notifications","setNotifications","useState","loading","setLoading","loadingMore","setLoadingMore","lastVisible","setLastVisible","hasMore","setHasMore","setError","deleteDialogOpen","setDeleteDialogOpen","notificationToDelete","setNotificationToDelete","fetchInitialNotifications","useCallback","async","notificationsRef","collection","db","q","query","orderBy","limit","snapshots","getDocs","fetched","docs","map","d","data","length","err","console","fetchMoreNotifications","startAfter","newNotifications","prev","useEffect","handleMarkReadToggle","notificationId","currentReadState","notificationRef","doc","newState","n","setDoc","readTimestamp","serverTimestamp","merge","handleNotificationClick","trim","startsWith","window","open","warn","handleDeleteRequest","handleCloseDeleteDialog","setTimeout","handleConfirmDelete","originalNotifications","filter","deleteDoc","Container","maxWidth","py","textAlign","CircularProgress","xs","sm","component","AnimatePresence","style","position","top","zIndex","appBar","marginBottom","Alert","severity","onClose","Array","NOTIFICATIONS_PER_PAGE","_","index","NotificationsNoneIcon","grey","NotificationItem","my","Button","disabled","startIcon","textTransform","borderRadius","px","Dialog","PaperProps","DialogTitle","borderBottom","divider","pb","DeleteForeverIcon","mr","DialogContent","DialogContentText","DialogActions","disableElevation","autoFocus"],"sourceRoot":""}