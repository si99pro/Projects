{"version":3,"file":"static/js/122.79ad1be9.chunk.js","mappings":"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","sources":["pages/Profile.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n// src/pages/Profile.js\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { auth, db } from '../firebase';\r\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\r\nimport {\r\n    Container, Typography, TextField, Button, Avatar, Grid, Box,\r\n    Tabs, Tab, Alert, Snackbar, Slide, IconButton, InputAdornment,\r\n    Checkbox, FormControlLabel, CircularProgress, Tooltip, Skeleton // <-- Keep Skeleton import\r\n} from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\nimport SchoolIcon from '@mui/icons-material/School';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport styled from '@emotion/styled';\r\n// Removed Loader component import as it's no longer used\r\n// import Loader from '../components/Loader';\r\n\r\n// --- Styled Components (Minor adjustments for clarity) ---\r\n\r\nconst StyledContainer = styled(Container)`\r\n  margin-top: 40px; // Increased top margin\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nconst ProfileHeader = styled(Box)`\r\n    text-align: center;\r\n    margin-bottom: 24px;\r\n`;\r\n\r\nconst StyledAvatar = styled(Avatar)`\r\n  width: 120px;\r\n  height: 120px;\r\n  margin: 0 auto 16px;\r\n  font-size: 60px;\r\n  background-color: ${props => props.profilebg || '#673ab7'}; // Use profilebg color\r\n`;\r\n\r\nconst StyledTabs = styled(Tabs)`\r\n  margin-bottom: 24px; // Add space below tabs\r\n  border-bottom: 1px solid #e0e0e0;\r\n  .MuiTabs-indicator {\r\n    background-color: #673ab7;\r\n  }\r\n`;\r\n\r\nconst StyledTab = styled(Tab)`\r\n  color: #555; // Slightly darker default color\r\n  text-transform: none; // Use normal case\r\n  font-weight: 500;\r\n  &.Mui-selected {\r\n    color: #673ab7;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nconst ProfileCard = styled(Box)`\r\n  background-color: #fff;\r\n  border-radius: 12px; // Slightly more rounded\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); // Softer shadow\r\n  padding: 32px; // Increased padding\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst SectionTitle = styled(Typography)`\r\n  font-size: 1.3rem; // Slightly larger\r\n  font-weight: 600;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n  border-bottom: 1px solid #eee; // Add subtle separator\r\n  padding-bottom: 8px;\r\n`;\r\n\r\nconst StyledTextField = styled(TextField)`\r\n    margin-bottom: 16px;\r\n    .MuiInputBase-root.Mui-disabled { // Style disabled fields\r\n        color: rgba(0, 0, 0, 0.7); // Make text slightly darker than default disabled\r\n        background-color: #f9f9f9; // Slight background tint\r\n    }\r\n    .MuiInput-underline:before { // Hide underline for standard variant when not focused\r\n        border-bottom: none;\r\n    }\r\n    .MuiInput-underline:hover:not(.Mui-disabled):before { // Show underline on hover for standard\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.42);\r\n    }\r\n    .MuiInputBase-input:read-only {\r\n      cursor: default; // Change cursor for read-only standard fields\r\n    }\r\n`;\r\n\r\nconst ButtonContainer = styled(Box)`\r\n  display: flex;\r\n  gap: 8px; // Add space between buttons\r\n`;\r\n\r\nconst SaveButton = styled(Button)`\r\n  background-color: #673ab7;\r\n  color: #fff;\r\n  &:hover {\r\n    background-color: #512da8;\r\n  }\r\n  &:disabled { // Style disabled save button\r\n    background-color: rgba(0, 0, 0, 0.12);\r\n  }\r\n`;\r\n\r\nconst CancelButton = styled(Button)`\r\n  color: #757575;\r\n  &:hover {\r\n    background-color: #f5f5f5;\r\n  }\r\n`;\r\n\r\nconst ItemBox = styled(Box)`\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #fafafa; // Slight background for items\r\n  position: relative; // For positioning buttons if needed\r\n`;\r\n\r\nconst ItemContent = styled(Box)`\r\n  margin-left: 16px;\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst ItemActions = styled(Box)`\r\n  margin-left: auto; // Pushes actions to the right\r\n  display: flex;\r\n  gap: 4px;\r\n`;\r\n\r\nconst FormBox = styled(Box)`\r\n  margin-top: 16px;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  margin-bottom: 24px;\r\n  background-color: #fff; // Clear background for form\r\n`;\r\n\r\n// --- Helper: Debounce Function ---\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function executedFunction(...args) {\r\n        const later = () => {\r\n            clearTimeout(timeout);\r\n            func(...args);\r\n        };\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n    };\r\n}\r\n\r\n\r\n// --- Sub-Components ---\r\n\r\n// Generic Editable Field Component\r\nconst EditableField = React.memo(({\r\n    label, value, fieldName, onSave, onCancel, onChange,\r\n    IconComponent, multiline = false, rows = 1,\r\n    readOnly = false, // For fields that are never editable\r\n    prefix = null,\r\n    disabled = false, // General disabled state\r\n}) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [currentValue, setCurrentValue] = useState(value);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Update internal state if the external value changes (e.g., after initial load or external update)\r\n        setCurrentValue(value);\r\n    }, [value]);\r\n\r\n    const handleEditClick = () => {\r\n        if (readOnly) return;\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const handleSaveClick = async () => {\r\n        if (currentValue === value) { // Don't save if value hasn't changed\r\n            setIsEditing(false);\r\n            return;\r\n        }\r\n        setIsSaving(true);\r\n        try {\r\n            await onSave(fieldName, currentValue);\r\n            setIsEditing(false);\r\n        } catch (error) {\r\n            console.error(\"Save failed:\", error);\r\n            // Error display is handled by the main component's snackbar\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        setCurrentValue(value); // Revert to original value from props\r\n        setIsEditing(false);\r\n        if (onCancel) onCancel(fieldName);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setCurrentValue(e.target.value);\r\n        if (onChange) onChange(e.target.value); // Allow parent to react if needed\r\n    };\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const debouncedSave = useCallback(debounce(handleSaveClick, 1000), [currentValue, fieldName, onSave]);\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter' && !multiline && isEditing) {\r\n            handleSaveClick();\r\n        } else if (e.key === 'Escape' && isEditing) {\r\n            handleCancelClick();\r\n        }\r\n    };\r\n\r\n     // Automatically save on blur for simplicity, except for multiline\r\n     const handleBlur = () => {\r\n        if (isEditing && !multiline && currentValue !== value) {\r\n             handleSaveClick();\r\n        } else if (isEditing && !multiline && currentValue === value) {\r\n            // If blurred without changes, just cancel editing state\r\n            handleCancelClick();\r\n        }\r\n        // For multiline, require explicit save/cancel click\r\n    };\r\n\r\n    return (\r\n        <StyledTextField\r\n            label={label}\r\n            value={currentValue ?? ''} // Ensure value is not undefined/null for TextField\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            onBlur={handleBlur} // Save on blur for non-multiline\r\n            fullWidth\r\n            multiline={multiline}\r\n            rows={rows}\r\n            variant={isEditing || readOnly ? \"outlined\" : \"standard\"}\r\n            disabled={disabled || isSaving || readOnly} // Disable field during save or if permanently read-only\r\n            InputProps={{\r\n                readOnly: !isEditing || readOnly,\r\n                startAdornment: (\r\n                    <>\r\n                        {IconComponent && (\r\n                            <InputAdornment position=\"start\">\r\n                                <IconComponent sx={{ mr: prefix ? 0 : 1, color: 'action.active' }} />\r\n                            </InputAdornment>\r\n                        )}\r\n                         {prefix && !isEditing && <Typography variant=\"body1\" sx={{ mr: 0.5, color: 'text.secondary' }}>{prefix}</Typography>}\r\n                    </>\r\n                ),\r\n                endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                        {readOnly ? null : isEditing ? (\r\n                            <ButtonContainer>\r\n                                <Tooltip title=\"Save\">\r\n                                    <IconButton\r\n                                        onClick={handleSaveClick}\r\n                                        aria-label=\"save\"\r\n                                        size=\"small\"\r\n                                        disabled={isSaving || currentValue === value}\r\n                                        color=\"primary\"\r\n                                    >\r\n                                        {isSaving ? <CircularProgress size={20} /> : <SaveIcon />}\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Cancel\">\r\n                                    <IconButton onClick={handleCancelClick} aria-label=\"cancel\" size=\"small\" disabled={isSaving}>\r\n                                        <CancelIcon />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </ButtonContainer>\r\n                        ) : (\r\n                            <Tooltip title=\"Edit\">\r\n                                <IconButton onClick={handleEditClick} aria-label=\"edit\" size=\"small\" disabled={disabled}>\r\n                                    <EditIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n                    </InputAdornment>\r\n                ),\r\n            }}\r\n             // Add sx prop for specific styling like removing underline for read-only standard\r\n             sx={{\r\n                ...( (!isEditing && !readOnly) && { // Style standard variant when not editing\r\n                    '& .MuiInput-underline:before': { borderBottom: '1px dashed rgba(0, 0, 0, 0.2)' }, // Dashed line for view mode\r\n                    '&:hover .MuiInput-underline:before': { borderBottom: '1px solid rgba(0, 0, 0, 0.5) !important' }, // Solid line on hover\r\n                }),\r\n                ...(readOnly && { // Styles for permanently read-only fields\r\n                  '& .MuiInput-underline:before': { borderBottom: 'none' },\r\n                  '& .MuiInput-underline:after': { borderBottom: 'none' },\r\n                  '& .MuiInput-underline:hover:not(.Mui-disabled):before': { borderBottom: 'none' },\r\n                  '& .MuiInputBase-input': { cursor: 'default' }\r\n                })\r\n            }}\r\n        />\r\n    );\r\n});\r\n\r\n// --- Main Profile Component ---\r\n\r\nfunction Profile() {\r\n    // Grouped State - Initialized with null/empty values suitable for Skeleton checks\r\n    const [basicInfo, setBasicInfo] = useState({ fullName: null, email: null, studentId: null, batch: null, session: null, profilebg: null });\r\n    const [contactInfo, setContactInfo] = useState({ phoneNumber: null, facebook: null, linkedin: null, website: null });\r\n    const [eduInfo, setEduInfo] = useState({ educationDetails: null }); // Use null for array initially\r\n    const [workInfo, setWorkInfo] = useState({ workExperience: null }); // Use null for array initially\r\n    const [placeInfo, setPlaceInfo] = useState({ currentCity: null, hometown: null });\r\n    const [detailInfo, setDetailInfo] = useState({ birthdate: null, bloodGroup: null, fieldOfExpertise: null, bio: null, aboutYou: null });\r\n\r\n    // Component State\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [loading, setLoading] = useState(true); // Start loading\r\n    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\r\n    const [basicInfoAlertOpen, setBasicInfoAlertOpen] = useState(false);\r\n\r\n    // Fetch Data\r\n    useEffect(() => {\r\n        const fetchProfileData = async () => {\r\n            setLoading(true); // Ensure loading is true at the start\r\n             // Reset states to initial null/empty for skeleton display if re-fetching\r\n            setBasicInfo({ fullName: null, email: null, studentId: null, batch: null, session: null, profilebg: null });\r\n            setContactInfo({ phoneNumber: null, facebook: null, linkedin: null, website: null });\r\n            setEduInfo({ educationDetails: null });\r\n            setWorkInfo({ workExperience: null });\r\n            setPlaceInfo({ currentCity: null, hometown: null });\r\n            setDetailInfo({ birthdate: null, bloodGroup: null, fieldOfExpertise: null, bio: null, aboutYou: null });\r\n\r\n            try {\r\n                const user = auth.currentUser;\r\n                if (user) {\r\n                    const userDocRef = doc(db, 'users', user.uid);\r\n                    const docSnap = await getDoc(userDocRef);\r\n\r\n                    if (docSnap.exists()) {\r\n                        const data = docSnap.data();\r\n                        // Set state using || {} or || [] to provide defaults after loading\r\n                        setBasicInfo(data.basicInfo || { fullName: '', email: '', studentId: '', batch: '', session: '', profilebg: '#673ab7' });\r\n                        setContactInfo(data.contactInfo || { phoneNumber: '', facebook: '', linkedin: '', website: '' });\r\n                        setEduInfo(data.eduInfo || { educationDetails: [] });\r\n                        setWorkInfo(data.workInfo || { workExperience: [] });\r\n                        setPlaceInfo(data.placeInfo || { currentCity: '', hometown: '' });\r\n                        setDetailInfo(data.detailInfo || { birthdate: '', bloodGroup: '', fieldOfExpertise: '', bio: '', aboutYou: '' });\r\n                    } else {\r\n                        console.log('No profile document found for user:', user.uid);\r\n                        // Set empty defaults if profile doesn't exist, allowing user to fill\r\n                        setBasicInfo({ fullName: user.displayName || '', email: user.email || '', studentId: '', batch: '', session: '', profilebg: '#673ab7' });\r\n                        setContactInfo({ phoneNumber: '', facebook: '', linkedin: '', website: '' });\r\n                        setEduInfo({ educationDetails: [] });\r\n                        setWorkInfo({ workExperience: [] });\r\n                        setPlaceInfo({ currentCity: '', hometown: '' });\r\n                        setDetailInfo({ birthdate: '', bloodGroup: '', fieldOfExpertise: '', bio: '', aboutYou: '' });\r\n                        setSnackbar({ open: true, message: 'Profile data not found. Please fill in your details.', severity: 'info' });\r\n                    }\r\n                } else {\r\n                     console.log('User not logged in');\r\n                     // Handle case where user is not logged in (should ideally be handled by routing)\r\n                     // Set defaults or potentially navigate away\r\n                     setSnackbar({ open: true, message: 'Please log in to view your profile.', severity: 'warning' });\r\n                     // Potentially set empty defaults here too if staying on the page\r\n                     setBasicInfo({ fullName: '', email: '', studentId: '', batch: '', session: '', profilebg: '#673ab7' });\r\n                     setContactInfo({ phoneNumber: '', facebook: '', linkedin: '', website: '' });\r\n                     setEduInfo({ educationDetails: [] });\r\n                     setWorkInfo({ workExperience: [] });\r\n                     setPlaceInfo({ currentCity: '', hometown: '' });\r\n                     setDetailInfo({ birthdate: '', bloodGroup: '', fieldOfExpertise: '', bio: '', aboutYou: '' });\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching profile data:', error);\r\n                setSnackbar({ open: true, message: `Failed to load profile data: ${error.message}`, severity: 'error' });\r\n                 // Set empty defaults on error to avoid crashing UI components expecting objects/arrays\r\n                 setBasicInfo({ fullName: '', email: '', studentId: '', batch: '', session: '', profilebg: '#673ab7' });\r\n                 setContactInfo({ phoneNumber: '', facebook: '', linkedin: '', website: '' });\r\n                 setEduInfo({ educationDetails: [] });\r\n                 setWorkInfo({ workExperience: [] });\r\n                 setPlaceInfo({ currentCity: '', hometown: '' });\r\n                 setDetailInfo({ birthdate: '', bloodGroup: '', fieldOfExpertise: '', bio: '', aboutYou: '' });\r\n            } finally {\r\n                // Add a small delay to prevent flashing if data loads very quickly\r\n                setTimeout(() => setLoading(false), 300);\r\n            }\r\n        };\r\n\r\n        fetchProfileData();\r\n    }, []); // Empty dependency array ensures this runs only once on mount\r\n\r\n\r\n    // --- Generic Save Handler ---\r\n    const handleSaveField = useCallback(async (fieldName, value) => {\r\n        // Clear previous snackbar messages\r\n        setSnackbar(prev => ({ ...prev, open: false }));\r\n\r\n        const user = auth.currentUser;\r\n        if (!user) {\r\n            setSnackbar({ open: true, message: 'User not authenticated.', severity: 'error' });\r\n            throw new Error(\"User not authenticated.\"); // Throw error to stop EditableField saving state\r\n        }\r\n\r\n        const userDocRef = doc(db, 'users', user.uid);\r\n        let updateData = {};\r\n        let newStateUpdater = () => {}; // Function to update local state on success\r\n\r\n        // Determine the path and the state update function based on the field name\r\n        // Make sure contactInfo, placeInfo, detailInfo are not null before checking 'in'\r\n        if (contactInfo && fieldName in contactInfo) {\r\n            updateData[`contactInfo.${fieldName}`] = value;\r\n            newStateUpdater = () => setContactInfo(prev => ({ ...prev, [fieldName]: value }));\r\n        } else if (placeInfo && fieldName in placeInfo) {\r\n            updateData[`placeInfo.${fieldName}`] = value;\r\n             newStateUpdater = () => setPlaceInfo(prev => ({ ...prev, [fieldName]: value }));\r\n        } else if (detailInfo && fieldName in detailInfo) {\r\n            updateData[`detailInfo.${fieldName}`] = value;\r\n             newStateUpdater = () => setDetailInfo(prev => ({ ...prev, [fieldName]: value }));\r\n        } else {\r\n            console.error(\"Unknown field name or state object is null:\", fieldName);\r\n            setSnackbar({ open: true, message: `Cannot save unknown field: ${fieldName}`, severity: 'error' });\r\n            throw new Error(`Unknown field: ${fieldName}`);\r\n        }\r\n\r\n        try {\r\n            await updateDoc(userDocRef, updateData);\r\n            newStateUpdater(); // Update local state only after successful Firestore update\r\n            setSnackbar({ open: true, message: 'Profile updated successfully!', severity: 'success' });\r\n            console.log('Profile updated:', fieldName);\r\n        } catch (err) {\r\n            console.error('Error updating profile field:', fieldName, err);\r\n            setSnackbar({ open: true, message: `Error updating profile: ${err.message}`, severity: 'error' });\r\n            throw err; // Re-throw error so EditableField knows save failed\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [contactInfo, placeInfo, detailInfo]); // Dependencies: Ensure the function has access to the latest state\r\n\r\n\r\n    // --- Save Handlers for Array Data (Work/Edu) ---\r\n    const handleSaveWorkExperience = useCallback(async (updatedWorkExperiences) => {\r\n        setSnackbar(prev => ({ ...prev, open: false }));\r\n        const user = auth.currentUser;\r\n        if (!user) {\r\n            setSnackbar({ open: true, message: 'User not authenticated.', severity: 'error' });\r\n            return false; // Indicate failure\r\n        }\r\n        const userDocRef = doc(db, 'users', user.uid);\r\n        try {\r\n            await updateDoc(userDocRef, { 'workInfo.workExperience': updatedWorkExperiences });\r\n            setWorkInfo({ workExperience: updatedWorkExperiences }); // Update local state\r\n            setSnackbar({ open: true, message: 'Work experience updated.', severity: 'success' });\r\n            return true; // Indicate success\r\n        } catch (err) {\r\n            console.error('Error saving work experience:', err);\r\n            setSnackbar({ open: true, message: `Error saving work experience: ${err.message}`, severity: 'error' });\r\n            return false; // Indicate failure\r\n        }\r\n    }, []); // No state dependencies needed here\r\n\r\n    const handleSaveEducation = useCallback(async (updatedEducationDetails) => {\r\n         setSnackbar(prev => ({ ...prev, open: false }));\r\n        const user = auth.currentUser;\r\n        if (!user) {\r\n            setSnackbar({ open: true, message: 'User not authenticated.', severity: 'error' });\r\n            return false;\r\n        }\r\n        const userDocRef = doc(db, 'users', user.uid);\r\n        try {\r\n            await updateDoc(userDocRef, { 'eduInfo.educationDetails': updatedEducationDetails });\r\n            setEduInfo({ educationDetails: updatedEducationDetails }); // Update local state\r\n            setSnackbar({ open: true, message: 'Education updated.', severity: 'success' });\r\n             return true;\r\n        } catch (err) {\r\n            console.error('Error saving education:', err);\r\n            setSnackbar({ open: true, message: `Error saving education: ${err.message}`, severity: 'error' });\r\n            return false;\r\n        }\r\n    }, []); // No state dependencies\r\n\r\n\r\n    // --- Tab Change Handler ---\r\n    const handleTabChange = (event, newValue) => {\r\n        setActiveTab(newValue);\r\n    };\r\n\r\n    // --- Snackbar Handlers ---\r\n    const handleCloseSnackbar = () => {\r\n        setSnackbar(prev => ({ ...prev, open: false }));\r\n    };\r\n\r\n    const handleEditBasicInfo = () => {\r\n        setBasicInfoAlertOpen(true);\r\n    };\r\n\r\n    const handleCloseBasicInfoAlert = () => {\r\n        setBasicInfoAlertOpen(false);\r\n    };\r\n\r\n    // --- Memoized Tab Content ---\r\n    // Using useMemo to prevent re-rendering of tabs unless their specific data changes\r\n    // Note: Pass handleSaveField directly, EditableField handles its own state.\r\n\r\n    const basicInfoTabContent = useMemo(() => (\r\n        <Box mt={3}>\r\n            <SectionTitle>Basic Information</SectionTitle>\r\n            {/* Use readOnly prop and disable edit button */}\r\n             <StyledTextField\r\n                label=\"Full Name\"\r\n                value={basicInfo.fullName ?? ''} // Use default empty string if null\r\n                fullWidth\r\n                variant=\"standard\" // Use standard for read-only display\r\n                InputProps={{ readOnly: true, disableUnderline: true }}\r\n                onClick={handleEditBasicInfo} // Show alert on click\r\n                sx={{ cursor: 'not-allowed' }} // Indicate non-editable\r\n            />\r\n            {/* Repeat for other basic info fields */}\r\n             <StyledTextField label=\"Email\" value={basicInfo.email ?? ''} fullWidth variant=\"standard\" InputProps={{ readOnly: true, disableUnderline: true }} onClick={handleEditBasicInfo} sx={{ cursor: 'not-allowed' }} />\r\n             <StyledTextField label=\"Student ID\" value={basicInfo.studentId ?? ''} fullWidth variant=\"standard\" InputProps={{ readOnly: true, disableUnderline: true }} onClick={handleEditBasicInfo} sx={{ cursor: 'not-allowed' }} />\r\n             <StyledTextField label=\"Batch\" value={basicInfo.batch ?? ''} fullWidth variant=\"standard\" InputProps={{ readOnly: true, disableUnderline: true }} onClick={handleEditBasicInfo} sx={{ cursor: 'not-allowed' }} />\r\n             <StyledTextField label=\"Session\" value={basicInfo.session ?? ''} fullWidth variant=\"standard\" InputProps={{ readOnly: true, disableUnderline: true }} onClick={handleEditBasicInfo} sx={{ cursor: 'not-allowed' }} />\r\n             <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                Basic information cannot be edited directly. Please contact an administrator if changes are needed.\r\n            </Alert>\r\n        </Box>\r\n    ), [basicInfo]);\r\n\r\n    const workEduTabContent = useMemo(() => (\r\n        <WorkEduTab\r\n            workInfo={workInfo}\r\n            eduInfo={eduInfo}\r\n            onSaveWork={handleSaveWorkExperience}\r\n            onSaveEdu={handleSaveEducation}\r\n            isLoading={loading} // Pass loading state to handle internal skeletons\r\n        />\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    ), [workInfo, eduInfo, handleSaveWorkExperience, handleSaveEducation, loading]);\r\n\r\n    const placesLivedTabContent = useMemo(() => (\r\n        <Box mt={3}>\r\n            <SectionTitle>Places Lived</SectionTitle>\r\n            <EditableField\r\n                label=\"Current City\"\r\n                value={placeInfo.currentCity ?? ''}\r\n                fieldName=\"currentCity\"\r\n                onSave={handleSaveField}\r\n                IconComponent={HomeIcon}\r\n            />\r\n            <EditableField\r\n                label=\"Hometown\"\r\n                value={placeInfo.hometown ?? ''}\r\n                fieldName=\"hometown\"\r\n                onSave={handleSaveField}\r\n                IconComponent={HomeIcon}\r\n            />\r\n        </Box>\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    ), [placeInfo, handleSaveField]);\r\n\r\n    const contactTabContent = useMemo(() => (\r\n         <Box mt={3}>\r\n            <SectionTitle>Contact Information</SectionTitle>\r\n            <EditableField label=\"Phone Number\" value={contactInfo.phoneNumber ?? ''} fieldName=\"phoneNumber\" onSave={handleSaveField} IconComponent={ContactPhoneIcon} />\r\n            <EditableField label=\"Facebook Profile\" value={contactInfo.facebook ?? ''} fieldName=\"facebook\" onSave={handleSaveField} IconComponent={LinkIcon} prefix=\"facebook.com/\" />\r\n            <EditableField label=\"LinkedIn Profile\" value={contactInfo.linkedin ?? ''} fieldName=\"linkedin\" onSave={handleSaveField} IconComponent={LinkIcon} prefix=\"linkedin.com/in/\" />\r\n            <EditableField label=\"Website\" value={contactInfo.website ?? ''} fieldName=\"website\" onSave={handleSaveField} IconComponent={LinkIcon} prefix=\"https://\" />\r\n        </Box>\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    ), [contactInfo, handleSaveField]);\r\n\r\n     const detailsTabContent = useMemo(() => (\r\n        <Box mt={3}>\r\n            <SectionTitle>Details About You</SectionTitle>\r\n            <EditableField label=\"Birthdate\" value={detailInfo.birthdate ?? ''} fieldName=\"birthdate\" onSave={handleSaveField} IconComponent={InfoIcon} />\r\n            <EditableField label=\"Blood Group\" value={detailInfo.bloodGroup ?? ''} fieldName=\"bloodGroup\" onSave={handleSaveField} IconComponent={InfoIcon} />\r\n            <EditableField label=\"Field of Expertise\" value={detailInfo.fieldOfExpertise ?? ''} fieldName=\"fieldOfExpertise\" onSave={handleSaveField} IconComponent={InfoIcon} />\r\n            <EditableField label=\"Bio\" value={detailInfo.bio ?? ''} fieldName=\"bio\" onSave={handleSaveField} IconComponent={DescriptionIcon} multiline rows={4} />\r\n            <EditableField label=\"About You\" value={detailInfo.aboutYou ?? ''} fieldName=\"aboutYou\" onSave={handleSaveField} IconComponent={DescriptionIcon} multiline rows={4} />\r\n        </Box>\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    ), [detailInfo, handleSaveField]);\r\n\r\n\r\n    // ********** SKELETON LOADER **********\r\n    if (loading) {\r\n        return (\r\n            <StyledContainer maxWidth=\"md\">\r\n                <ProfileHeader>\r\n                    <Skeleton variant=\"circular\" width={120} height={120} sx={{ margin: '0 auto 16px' }} />\r\n                    <Skeleton variant=\"text\" width=\"40%\" height={40} sx={{ margin: '0 auto 8px' }} />\r\n                    <Skeleton variant=\"text\" width=\"50%\" height={24} sx={{ margin: '0 auto 16px' }} />\r\n                </ProfileHeader>\r\n                <ProfileCard>\r\n                    {/* Skeleton for Tabs */}\r\n                    <Skeleton variant=\"rectangular\" height={48} sx={{ mb: 3 }} />\r\n\r\n                    {/* Skeleton for Tab Content (e.g., Basic Info or current active tab) */}\r\n                    <Skeleton variant=\"text\" width=\"30%\" height={40} sx={{ mb: 3 }} /> {/* Section Title */}\r\n\r\n                    {/* Skeleton for Editable Fields (example for 3 fields) */}\r\n                    <Skeleton variant=\"rectangular\" height={56} sx={{ mb: 2 }} />\r\n                    <Skeleton variant=\"rectangular\" height={56} sx={{ mb: 2 }} />\r\n                    <Skeleton variant=\"rectangular\" height={56} sx={{ mb: 2 }} />\r\n                     <Skeleton variant=\"rectangular\" height={56} sx={{ mb: 2 }} />\r\n                     {/* Add more skeletons if the initial view has more elements */}\r\n                </ProfileCard>\r\n            </StyledContainer>\r\n        );\r\n    }\r\n    // *************************************\r\n\r\n    return (\r\n        <>\r\n            <StyledContainer maxWidth=\"md\">\r\n                 <ProfileHeader>\r\n                    {/* Ensure basicInfo exists before accessing properties */}\r\n                     <StyledAvatar profilebg={basicInfo?.profilebg}>\r\n                         {basicInfo?.fullName ? basicInfo.fullName.charAt(0).toUpperCase() : '?'}\r\n                     </StyledAvatar>\r\n                    <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                        {basicInfo?.fullName || 'Your Profile'}\r\n                    </Typography>\r\n                     <Typography variant=\"body1\" color=\"textSecondary\">\r\n                         {basicInfo?.email}\r\n                     </Typography>\r\n                 </ProfileHeader>\r\n\r\n                <ProfileCard>\r\n                    <StyledTabs value={activeTab} onChange={handleTabChange} aria-label=\"profile tabs\" centered>\r\n                        <StyledTab label=\"Basic Info\" />\r\n                        <StyledTab label=\"Work & Education\" />\r\n                        <StyledTab label=\"Places Lived\" />\r\n                        <StyledTab label=\"Contact\" />\r\n                        <StyledTab label=\"Details\" />\r\n                    </StyledTabs>\r\n\r\n                    {/* Render active tab content */}\r\n                    {activeTab === 0 && basicInfoTabContent}\r\n                    {activeTab === 1 && workEduTabContent}\r\n                    {activeTab === 2 && placesLivedTabContent}\r\n                    {activeTab === 3 && contactTabContent}\r\n                    {activeTab === 4 && detailsTabContent}\r\n\r\n                </ProfileCard>\r\n\r\n                {/* --- Snackbars --- */}\r\n                <Snackbar\r\n                    open={snackbar.open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleCloseSnackbar}\r\n                    TransitionComponent={Slide}\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                >\r\n                    <Alert\r\n                        onClose={handleCloseSnackbar}\r\n                        severity={snackbar.severity}\r\n                        variant=\"filled\" // Use filled variant for better visibility\r\n                        sx={{ width: '100%', display: 'flex', alignItems: 'center' }}\r\n                        iconMapping={{\r\n                            success: <CheckCircleIcon fontSize=\"inherit\" />,\r\n                            error: <ErrorIcon fontSize=\"inherit\" />,\r\n                            info: <InfoIcon fontSize=\"inherit\" />,\r\n                            warning: <ErrorIcon fontSize='inherit' /> // Use ErrorIcon for warning too or specific WarningIcon\r\n                        }}\r\n                    >\r\n                        {snackbar.message}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n                {/* Alert for trying to edit basic info (optional, as inline alert is added) */}\r\n                <Snackbar\r\n                    open={basicInfoAlertOpen}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleCloseBasicInfoAlert}\r\n                    TransitionComponent={Slide}\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n                >\r\n                    <Alert\r\n                        onClose={handleCloseBasicInfoAlert}\r\n                        severity=\"warning\"\r\n                        variant=\"filled\"\r\n                        sx={{ width: '100%' }}\r\n                        iconMapping={{ warning: <ErrorIcon fontSize='inherit' /> }}\r\n                    >\r\n                        These fields cannot be edited directly. Please contact the administrator.\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n}\r\n\r\n// --- Work & Education Tab Component ---\r\n\r\n// Pass isLoading prop\r\nconst WorkEduTab = React.memo(({ workInfo, eduInfo, onSaveWork, onSaveEdu, isLoading }) => {\r\n    // State specific to this tab (editing indices, form values)\r\n    const [editingExperienceIndex, setEditingExperienceIndex] = useState(null); // null | 'NEW' | number\r\n    const [workForm, setWorkForm] = useState({ company: '', position: '', city: '', startYear: '', endYear: '', currentlyWorking: false });\r\n    const [isSavingWork, setIsSavingWork] = useState(false);\r\n\r\n    const [editingEducationIndex, setEditingEducationIndex] = useState(null); // null | 'NEW' | number\r\n    const [eduForm, setEduForm] = useState({ institution: '', degree: '', fieldOfStudy: '', graduationYear: '' });\r\n    const [isSavingEdu, setIsSavingEdu] = useState(false);\r\n\r\n\r\n    // --- Work Experience Handlers ---\r\n    const handleAddWorkExperience = () => {\r\n        setWorkForm({ company: '', position: '', city: '', startYear: '', endYear: '', currentlyWorking: false });\r\n        setEditingExperienceIndex('NEW');\r\n    };\r\n\r\n    const handleEditWorkExperience = (index) => {\r\n        // Ensure workExperience exists and has the item\r\n        if (!workInfo?.workExperience?.[index]) return;\r\n        const exp = workInfo.workExperience[index];\r\n        const [start = '', end = ''] = exp.duration?.split(' - ') || [];\r\n        const currentlyWorking = end === 'Present';\r\n        setWorkForm({\r\n            company: exp.company || '',\r\n            position: exp.position || '',\r\n            city: exp.city || '',\r\n            startYear: start,\r\n            endYear: currentlyWorking ? '' : end,\r\n            currentlyWorking: currentlyWorking,\r\n        });\r\n        setEditingExperienceIndex(index);\r\n    };\r\n\r\n    const handleCancelWorkEdit = () => {\r\n        setEditingExperienceIndex(null);\r\n        setWorkForm({ company: '', position: '', city: '', startYear: '', endYear: '', currentlyWorking: false }); // Reset form\r\n    };\r\n\r\n    const handleDeleteWorkExperience = async (indexToDelete) => {\r\n        setIsSavingWork(true);\r\n        const currentExperiences = workInfo?.workExperience || [];\r\n        const updatedWorkExperiences = currentExperiences.filter((_, index) => index !== indexToDelete);\r\n        const success = await onSaveWork(updatedWorkExperiences);\r\n         if (success) {\r\n             setEditingExperienceIndex(null); // Close form if deletion was successful\r\n         }\r\n        setIsSavingWork(false);\r\n    };\r\n\r\n     const handleSaveCurrentWorkExperience = async () => {\r\n        // Basic Validation\r\n        if (!workForm.company || !workForm.position || !workForm.city || !workForm.startYear || (!workForm.currentlyWorking && !workForm.endYear)) {\r\n             console.error(\"Work form validation failed\");\r\n             alert(\"Please fill in all required work experience fields.\"); // Simple alert for now\r\n             return;\r\n         }\r\n\r\n        setIsSavingWork(true);\r\n        const workDuration = workForm.currentlyWorking ? `${workForm.startYear} - Present` : `${workForm.startYear} - ${workForm.endYear}`;\r\n        const newExperience = {\r\n            company: workForm.company,\r\n            position: workForm.position,\r\n            city: workForm.city,\r\n            duration: workDuration,\r\n        };\r\n\r\n        let updatedWorkExperiences;\r\n        const currentExperiences = workInfo?.workExperience || [];\r\n        if (editingExperienceIndex === 'NEW') {\r\n            updatedWorkExperiences = [...currentExperiences, newExperience];\r\n        } else if (typeof editingExperienceIndex === 'number') {\r\n            updatedWorkExperiences = [...currentExperiences];\r\n            updatedWorkExperiences[editingExperienceIndex] = newExperience;\r\n        } else {\r\n             setIsSavingWork(false);\r\n             return; // Should not happen\r\n        }\r\n\r\n         // Sort experiences after update (most recent first)\r\n         updatedWorkExperiences.sort((a, b) => {\r\n            const [, endAStr] = a.duration?.split(' - ') || [];\r\n            const [, endBStr] = b.duration?.split(' - ') || [];\r\n            const endAYear = endAStr === 'Present' ? Infinity : parseInt(endAStr || '0', 10);\r\n            const endBYear = endBStr === 'Present' ? Infinity : parseInt(endBStr || '0', 10);\r\n            return endBYear - endAYear; // Descending order by end year\r\n        });\r\n\r\n\r\n        const success = await onSaveWork(updatedWorkExperiences);\r\n         if (success) {\r\n             handleCancelWorkEdit(); // Close form on success\r\n         }\r\n        setIsSavingWork(false);\r\n    };\r\n\r\n     // --- Education Handlers ---\r\n     const handleAddEducation = () => {\r\n        setEduForm({ institution: '', degree: '', fieldOfStudy: '', graduationYear: '' });\r\n        setEditingEducationIndex('NEW');\r\n    };\r\n\r\n     const handleEditEducation = (index) => {\r\n        // Ensure eduInfo exists and has the item\r\n        if (!eduInfo?.educationDetails?.[index]) return;\r\n        const edu = eduInfo.educationDetails[index];\r\n        setEduForm({\r\n            institution: edu.institution || '',\r\n            degree: edu.degree || '',\r\n            fieldOfStudy: edu.fieldOfStudy || '',\r\n            graduationYear: edu.graduationYear || '',\r\n        });\r\n        setEditingEducationIndex(index);\r\n    };\r\n\r\n     const handleCancelEduEdit = () => {\r\n        setEditingEducationIndex(null);\r\n        setEduForm({ institution: '', degree: '', fieldOfStudy: '', graduationYear: '' }); // Reset form\r\n    };\r\n\r\n     const handleDeleteEducation = async (indexToDelete) => {\r\n         setIsSavingEdu(true);\r\n         const currentEducation = eduInfo?.educationDetails || [];\r\n        const updatedEducationDetails = currentEducation.filter((_, index) => index !== indexToDelete);\r\n        const success = await onSaveEdu(updatedEducationDetails);\r\n         if (success) {\r\n             setEditingEducationIndex(null);\r\n         }\r\n         setIsSavingEdu(false);\r\n    };\r\n\r\n     const handleSaveCurrentEducation = async () => {\r\n         // Basic Validation\r\n         if (!eduForm.institution || !eduForm.degree || !eduForm.fieldOfStudy || !eduForm.graduationYear) {\r\n             console.error(\"Education form validation failed\");\r\n              alert(\"Please fill in all required education fields.\"); // Simple alert\r\n             return;\r\n         }\r\n\r\n        setIsSavingEdu(true);\r\n        const newEducation = { ...eduForm };\r\n\r\n        let updatedEducationDetails;\r\n        const currentEducation = eduInfo?.educationDetails || [];\r\n        if (editingEducationIndex === 'NEW') {\r\n            updatedEducationDetails = [...currentEducation, newEducation];\r\n        } else if (typeof editingEducationIndex === 'number') {\r\n            updatedEducationDetails = [...currentEducation];\r\n            updatedEducationDetails[editingEducationIndex] = newEducation;\r\n        } else {\r\n             setIsSavingEdu(false);\r\n            return; // Should not happen\r\n        }\r\n\r\n         // Sort education by graduation year (most recent first)\r\n         updatedEducationDetails.sort((a, b) => parseInt(b.graduationYear || '0', 10) - parseInt(a.graduationYear || '0', 10));\r\n\r\n\r\n        const success = await onSaveEdu(updatedEducationDetails);\r\n         if (success) {\r\n             handleCancelEduEdit(); // Close form on success\r\n         }\r\n        setIsSavingEdu(false);\r\n    };\r\n\r\n\r\n    // Memoize sorted lists, handle null case\r\n     const sortedWorkExperiences = useMemo(() =>\r\n        [...(workInfo?.workExperience || [])].sort((a, b) => {\r\n             const [, endAStr] = a.duration?.split(' - ') || [];\r\n             const [, endBStr] = b.duration?.split(' - ') || [];\r\n             const endAYear = endAStr === 'Present' ? Infinity : parseInt(endAStr || '0', 10);\r\n             const endBYear = endBStr === 'Present' ? Infinity : parseInt(endBStr || '0', 10);\r\n            return endBYear - endAYear; // Descending\r\n        }), [workInfo?.workExperience]); // Depend on the array itself\r\n\r\n     const sortedEducationDetails = useMemo(() =>\r\n         [...(eduInfo?.educationDetails || [])].sort((a, b) =>\r\n            parseInt(b.graduationYear || '0', 10) - parseInt(a.graduationYear || '0', 10) // Descending\r\n         ), [eduInfo?.educationDetails]); // Depend on the array itself\r\n\r\n\r\n    // --- Render Logic ---\r\n    return (\r\n        <Box mt={3}>\r\n            {/* --- Work Experience Section --- */}\r\n            <SectionTitle>Work Experience</SectionTitle>\r\n            {isLoading ? (\r\n                 <>\r\n                    {/* Skeleton for Work Items */}\r\n                    <Skeleton variant=\"rectangular\" height={80} sx={{ mb: 2, borderRadius: '8px' }} />\r\n                    <Skeleton variant=\"rectangular\" height={80} sx={{ mb: 2, borderRadius: '8px' }} />\r\n                 </>\r\n             ) : (\r\n                <>\r\n                 {sortedWorkExperiences.map((experience, index) => (\r\n                      <ItemBox key={`work-${index}`}>\r\n                          <BusinessIcon sx={{ mr: 1, color: 'action.active' }} />\r\n                          <ItemContent>\r\n                              <Typography variant=\"subtitle1\" fontWeight=\"bold\">{experience.company}</Typography>\r\n                              <Typography variant=\"body2\" color=\"textSecondary\">{experience.position} - {experience.city}</Typography>\r\n                              <Typography variant=\"body2\" color=\"textSecondary\">Duration: {experience.duration}</Typography>\r\n                          </ItemContent>\r\n                          {editingExperienceIndex !== index && ( // Show edit only if not currently editing this item\r\n                              <ItemActions>\r\n                                  <Tooltip title=\"Edit\">\r\n                                      <IconButton size=\"small\" onClick={() => handleEditWorkExperience(index)} disabled={editingExperienceIndex !== null || isSavingWork}>\r\n                                          <EditIcon fontSize=\"small\" />\r\n                                      </IconButton>\r\n                                  </Tooltip>\r\n                              </ItemActions>\r\n                          )}\r\n                      </ItemBox>\r\n                 ))}\r\n\r\n                 {/* Add/Edit Work Form */}\r\n                  {(editingExperienceIndex !== null) && (\r\n                      <WorkExperienceForm\r\n                         formData={workForm}\r\n                         setFormData={setWorkForm}\r\n                         onSave={handleSaveCurrentWorkExperience}\r\n                         onCancel={handleCancelWorkEdit}\r\n                         onDelete={editingExperienceIndex !== 'NEW' ? () => handleDeleteWorkExperience(editingExperienceIndex) : undefined}\r\n                         isSaving={isSavingWork}\r\n                         isNew={editingExperienceIndex === 'NEW'}\r\n                      />\r\n                  )}\r\n\r\n                  {/* Add Button - Show only if no form is open */}\r\n                  {editingExperienceIndex === null && (\r\n                      <Button\r\n                          variant=\"outlined\"\r\n                          startIcon={<AddIcon />}\r\n                          onClick={handleAddWorkExperience}\r\n                          disabled={isSavingWork} // Disable while any save is in progress\r\n                          sx={{ mt: 1 }}\r\n                      >\r\n                          Add Work Experience\r\n                      </Button>\r\n                  )}\r\n                </>\r\n            )}\r\n\r\n\r\n            {/* --- Education Section --- */}\r\n            <Box mt={5}> {/* Add more space before Education */}\r\n                <SectionTitle>Education (MSc/MBA/PhD etc.)</SectionTitle>\r\n                 {isLoading ? (\r\n                     <>\r\n                         {/* Skeleton for Education Items */}\r\n                         <Skeleton variant=\"rectangular\" height={80} sx={{ mb: 2, borderRadius: '8px' }} />\r\n                         <Skeleton variant=\"rectangular\" height={80} sx={{ mb: 2, borderRadius: '8px' }} />\r\n                     </>\r\n                 ) : (\r\n                    <>\r\n                     {sortedEducationDetails.map((education, index) => (\r\n                         <ItemBox key={`edu-${index}`}>\r\n                              <SchoolIcon sx={{ mr: 1, color: 'action.active' }} />\r\n                              <ItemContent>\r\n                                  <Typography variant=\"subtitle1\" fontWeight=\"bold\">{education.institution}</Typography>\r\n                                  <Typography variant=\"body2\" color=\"textSecondary\">{education.degree} in {education.fieldOfStudy}</Typography>\r\n                                  <Typography variant=\"body2\" color=\"textSecondary\">Graduated: {education.graduationYear}</Typography>\r\n                              </ItemContent>\r\n                              {editingEducationIndex !== index && (\r\n                                 <ItemActions>\r\n                                      <Tooltip title=\"Edit\">\r\n                                         <IconButton size=\"small\" onClick={() => handleEditEducation(index)} disabled={editingEducationIndex !== null || isSavingEdu}>\r\n                                             <EditIcon fontSize=\"small\"/>\r\n                                         </IconButton>\r\n                                     </Tooltip>\r\n                                 </ItemActions>\r\n                              )}\r\n                          </ItemBox>\r\n                     ))}\r\n\r\n                     {/* Add/Edit Education Form */}\r\n                     {(editingEducationIndex !== null) && (\r\n                         <EducationForm\r\n                            formData={eduForm}\r\n                            setFormData={setEduForm}\r\n                            onSave={handleSaveCurrentEducation}\r\n                            onCancel={handleCancelEduEdit}\r\n                            onDelete={editingEducationIndex !== 'NEW' ? () => handleDeleteEducation(editingEducationIndex) : undefined}\r\n                            isSaving={isSavingEdu}\r\n                            isNew={editingEducationIndex === 'NEW'}\r\n                         />\r\n                     )}\r\n\r\n                     {/* Add Button */}\r\n                     {editingEducationIndex === null && (\r\n                         <Button\r\n                             variant=\"outlined\"\r\n                             startIcon={<AddIcon />}\r\n                             onClick={handleAddEducation}\r\n                             disabled={isSavingEdu}\r\n                             sx={{ mt: 1 }}\r\n                         >\r\n                             Add Education\r\n                         </Button>\r\n                     )}\r\n                    </>\r\n                 )}\r\n            </Box>\r\n        </Box>\r\n    );\r\n});\r\n\r\n\r\n// --- Work Experience Form Component ---\r\nconst WorkExperienceForm = ({ formData, setFormData, onSave, onCancel, onDelete, isSaving, isNew }) => {\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: type === 'checkbox' ? checked : value\r\n        }));\r\n    };\r\n\r\n     const canSave = formData.company && formData.position && formData.city && formData.startYear && (formData.currentlyWorking || formData.endYear);\r\n\r\n    return (\r\n        <FormBox>\r\n             <Typography variant=\"h6\" gutterBottom>{isNew ? 'Add New Work Experience' : 'Edit Work Experience'}</Typography>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField label=\"Company *\" name=\"company\" value={formData.company} onChange={handleChange} fullWidth margin=\"normal\" disabled={isSaving} />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField label=\"Position *\" name=\"position\" value={formData.position} onChange={handleChange} fullWidth margin=\"normal\" disabled={isSaving} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                     <TextField label=\"City/Town *\" name=\"city\" value={formData.city} onChange={handleChange} fullWidth margin=\"normal\" disabled={isSaving} />\r\n                 </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                     <Typography variant=\"subtitle2\" gutterBottom sx={{ mt: 1 }}>Time Period *</Typography>\r\n                     <FormControlLabel\r\n                         control={<Checkbox name=\"currentlyWorking\" checked={formData.currentlyWorking} onChange={handleChange} disabled={isSaving} />}\r\n                         label=\"I currently work here\"\r\n                     />\r\n                 </Grid>\r\n                 <Grid item xs={6}>\r\n                    <TextField\r\n                         label=\"Start Year *\"\r\n                         name=\"startYear\"\r\n                         value={formData.startYear}\r\n                         onChange={handleChange}\r\n                         fullWidth\r\n                         margin=\"dense\" // Use dense margin in grids\r\n                         disabled={isSaving}\r\n                         type=\"number\" // Consider using type=\"number\" for years\r\n                     />\r\n                </Grid>\r\n                 {!formData.currentlyWorking && (\r\n                     <Grid item xs={6}>\r\n                        <TextField\r\n                             label=\"End Year *\"\r\n                             name=\"endYear\"\r\n                             value={formData.endYear}\r\n                             onChange={handleChange}\r\n                             fullWidth\r\n                             margin=\"dense\"\r\n                             disabled={isSaving || !formData.startYear} // Also disable if start year is empty\r\n                             type=\"number\"\r\n                             inputProps={{ min: formData.startYear || undefined }} // Basic validation: End year >= Start year\r\n                         />\r\n                    </Grid>\r\n                 )}\r\n            </Grid>\r\n            <Box mt={3} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                <ButtonContainer>\r\n                    <SaveButton variant=\"contained\" onClick={onSave} disabled={isSaving || !canSave}>\r\n                        {isSaving ? <CircularProgress size={24} color=\"inherit\" /> : 'Save'}\r\n                    </SaveButton>\r\n                    <CancelButton onClick={onCancel} disabled={isSaving}>Cancel</CancelButton>\r\n                </ButtonContainer>\r\n                {!isNew && onDelete && (\r\n                    <Tooltip title=\"Delete this experience\">\r\n                         {/* Ensure isSaving disables delete button */}\r\n                         <IconButton aria-label=\"delete\" onClick={onDelete} disabled={isSaving} color=\"error\">\r\n                             <DeleteIcon />\r\n                         </IconButton>\r\n                     </Tooltip>\r\n                 )}\r\n            </Box>\r\n        </FormBox>\r\n    );\r\n};\r\n\r\n\r\n// --- Education Form Component ---\r\nconst EducationForm = ({ formData, setFormData, onSave, onCancel, onDelete, isSaving, isNew }) => {\r\n\r\n     const handleChange = (e) => {\r\n         const { name, value } = e.target;\r\n         setFormData(prev => ({ ...prev, [name]: value }));\r\n     };\r\n\r\n      const canSave = formData.institution && formData.degree && formData.fieldOfStudy && formData.graduationYear;\r\n\r\n    return (\r\n        <FormBox>\r\n             <Typography variant=\"h6\" gutterBottom>{isNew ? 'Add New Education' : 'Edit Education'}</Typography>\r\n             <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <TextField label=\"Institution *\" name=\"institution\" value={formData.institution} onChange={handleChange} fullWidth margin=\"normal\" disabled={isSaving} />\r\n                 </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField label=\"Degree *\" name=\"degree\" value={formData.degree} onChange={handleChange} fullWidth margin=\"normal\" disabled={isSaving} />\r\n                 </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField label=\"Field of Study *\" name=\"fieldOfStudy\" value={formData.fieldOfStudy} onChange={handleChange} fullWidth margin=\"normal\" disabled={isSaving} />\r\n                 </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField label=\"Graduation Year *\" name=\"graduationYear\" value={formData.graduationYear} onChange={handleChange} fullWidth margin=\"normal\" disabled={isSaving} type=\"number\"/>\r\n                 </Grid>\r\n             </Grid>\r\n            <Box mt={3} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                 <ButtonContainer>\r\n                     <SaveButton variant=\"contained\" onClick={onSave} disabled={isSaving || !canSave}>\r\n                         {isSaving ? <CircularProgress size={24} color=\"inherit\" /> : 'Save'}\r\n                     </SaveButton>\r\n                     <CancelButton onClick={onCancel} disabled={isSaving}>Cancel</CancelButton>\r\n                 </ButtonContainer>\r\n                 {!isNew && onDelete && (\r\n                     <Tooltip title=\"Delete this education entry\">\r\n                         {/* Ensure isSaving disables delete button */}\r\n                         <IconButton aria-label=\"delete\" onClick={onDelete} disabled={isSaving} color=\"error\">\r\n                             <DeleteIcon />\r\n                         </IconButton>\r\n                     </Tooltip>\r\n                 )}\r\n            </Box>\r\n        </FormBox>\r\n    );\r\n};\r\n\r\n\r\nexport default Profile;"],"names":["StyledContainer","styled","Container","ProfileHeader","Box","StyledAvatar","Avatar","props","profilebg","StyledTabs","Tabs","StyledTab","Tab","ProfileCard","SectionTitle","Typography","StyledTextField","TextField","ButtonContainer","SaveButton","Button","CancelButton","ItemBox","ItemContent","ItemActions","FormBox","EditableField","React","_ref","label","value","fieldName","onSave","onCancel","onChange","IconComponent","multiline","rows","readOnly","prefix","disabled","isEditing","setIsEditing","useState","currentValue","setCurrentValue","isSaving","setIsSaving","useEffect","handleSaveClick","async","error","console","handleCancelClick","useCallback","func","wait","timeout","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","later","debounce","_jsx","e","target","onKeyDown","key","onBlur","handleBlur","fullWidth","variant","InputProps","startAdornment","_jsxs","_Fragment","children","InputAdornment","position","sx","mr","color","endAdornment","Tooltip","title","IconButton","onClick","size","CircularProgress","SaveIcon","CancelIcon","handleEditClick","EditIcon","borderBottom","cursor","WorkEduTab","_ref2","workInfo","eduInfo","onSaveWork","onSaveEdu","isLoading","editingExperienceIndex","setEditingExperienceIndex","workForm","setWorkForm","company","city","startYear","endYear","currentlyWorking","isSavingWork","setIsSavingWork","editingEducationIndex","setEditingEducationIndex","eduForm","setEduForm","institution","degree","fieldOfStudy","graduationYear","isSavingEdu","setIsSavingEdu","handleCancelWorkEdit","handleCancelEduEdit","sortedWorkExperiences","useMemo","workExperience","sort","a","b","_a$duration2","_b$duration2","endAStr","duration","split","endBStr","endAYear","Infinity","parseInt","sortedEducationDetails","educationDetails","mt","Skeleton","height","mb","borderRadius","map","experience","index","BusinessIcon","fontWeight","_workInfo$workExperie","_exp$duration","exp","start","end","handleEditWorkExperience","fontSize","WorkExperienceForm","formData","setFormData","alert","workDuration","newExperience","updatedWorkExperiences","currentExperiences","_a$duration","_b$duration","onDelete","filter","_","indexToDelete","handleDeleteWorkExperience","undefined","isNew","startIcon","AddIcon","handleAddWorkExperience","education","SchoolIcon","_eduInfo$educationDet","edu","handleEditEducation","EducationForm","newEducation","updatedEducationDetails","currentEducation","handleDeleteEducation","handleAddEducation","_ref3","handleChange","name","type","checked","prev","canSave","gutterBottom","Grid","container","spacing","item","xs","sm","margin","FormControlLabel","control","Checkbox","inputProps","min","display","justifyContent","alignItems","DeleteIcon","_ref4","basicInfo","setBasicInfo","fullName","email","studentId","batch","session","contactInfo","setContactInfo","phoneNumber","facebook","linkedin","website","setEduInfo","setWorkInfo","placeInfo","setPlaceInfo","currentCity","hometown","detailInfo","setDetailInfo","birthdate","bloodGroup","fieldOfExpertise","bio","aboutYou","activeTab","setActiveTab","loading","setLoading","snackbar","setSnackbar","open","message","severity","basicInfoAlertOpen","setBasicInfoAlertOpen","user","auth","currentUser","userDocRef","doc","db","uid","docSnap","getDoc","exists","data","log","displayName","fetchProfileData","handleSaveField","Error","updateData","newStateUpdater","updateDoc","err","handleSaveWorkExperience","handleSaveEducation","handleCloseSnackbar","handleEditBasicInfo","handleCloseBasicInfoAlert","basicInfoTabContent","_basicInfo$fullName","_basicInfo$email","_basicInfo$studentId","_basicInfo$batch","_basicInfo$session","disableUnderline","Alert","workEduTabContent","placesLivedTabContent","_placeInfo$currentCit","_placeInfo$hometown","HomeIcon","contactTabContent","_contactInfo$phoneNum","_contactInfo$facebook","_contactInfo$linkedin","_contactInfo$website","ContactPhoneIcon","LinkIcon","detailsTabContent","_detailInfo$birthdate","_detailInfo$bloodGrou","_detailInfo$fieldOfEx","_detailInfo$bio","_detailInfo$aboutYou","InfoIcon","DescriptionIcon","maxWidth","width","charAt","toUpperCase","component","handleTabChange","event","newValue","centered","Snackbar","autoHideDuration","onClose","TransitionComponent","Slide","anchorOrigin","vertical","horizontal","iconMapping","success","CheckCircleIcon","ErrorIcon","info","warning"],"sourceRoot":""}