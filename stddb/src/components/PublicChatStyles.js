// src/components/PublicChatStyles.js
// Contains all styled components for the PublicChat feature.

import styled from '@emotion/styled';
import { Box, Paper, TextField, Typography, Chip, alpha } from '@mui/material';
import ScrollToBottom from 'react-scroll-to-bottom';
// Emoji component is needed if used directly within styles (like in ReactionChip, though the example uses Typography)
// import { Emoji } from 'emoji-picker-react';

// --- Main Chat Wrapper ---
export const ChatWrapper = styled(Box)(({ theme }) => ({
    display: 'flex',
    flexDirection: 'column',
    height: '100%', // Ensure parent container defines height
    backgroundColor: theme.palette.background.default,
    overflow: 'hidden', // Prevent wrapper itself from scrolling
    borderRadius: theme.shape.borderRadius * 2, // Optional: Softer corners
    boxShadow: theme.shadows[3], // Optional: Add elevation
}));

// --- Chat Header ---
export const Header = styled(Paper)(({ theme }) => ({
    padding: theme.spacing(1, 2),
    borderBottom: `1px solid ${theme.palette.divider}`,
    flexShrink: 0,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    gap: theme.spacing(1.5),
    backgroundColor: theme.palette.background.paper, // Use paper for header
    borderTopLeftRadius: 'inherit', // Match parent border radius
    borderTopRightRadius: 'inherit',
    boxShadow: 'none', // No separate shadow needed usually
}));

// --- Messages Area ---
export const MessagesContainerWrapper = styled(Box)({
    flexGrow: 1,
    position: 'relative', // Needed for ScrollToBottom
    overflow: 'hidden', // Hide scrollbar before ScrollToBottom takes over
});

// --- Scrollable Messages Container ---
export const StyledScrollToBottom = styled(ScrollToBottom)(({ theme }) => ({
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    padding: theme.spacing(1, 1.5), // Consistent padding inside scrollable area
    '& > div:first-of-type': { // Target the inner scrollable div generated by react-scroll-to-bottom
        '&::-webkit-scrollbar': { width: '6px' },
        '&::-webkit-scrollbar-track': { background: 'transparent' },
        '&::-webkit-scrollbar-thumb': { background: theme.palette.action.hover, borderRadius: '3px' },
        '&::-webkit-scrollbar-thumb:hover': { background: theme.palette.action.selected },
        // Firefox scrollbar styling
        scrollbarWidth: 'thin',
        scrollbarColor: `${theme.palette.action.hover} transparent`,
    }
}));

// --- Individual Message Row ---
export const MessageItemContainer = styled(Box, {
    shouldForwardProp: (prop) => prop !== 'isSender' && prop !== 'isGrouped'
})(({ theme, isSender, isGrouped }) => ({
    display: 'flex',
    // Add slightly more space between distinct message groups (different user or time gap)
    marginBottom: isGrouped ? theme.spacing(0.5) : theme.spacing(1.5),
    marginTop: theme.spacing(0.25),
    flexDirection: isSender ? 'row-reverse' : 'row', // Align avatar based on sender
    alignItems: 'flex-end', // Align avatar with bottom of bubble/content
    gap: theme.spacing(1),
    position: 'relative', // For positioning hover actions
    // Show hover actions when hovering over the entire message item container
    '&:hover .message-actions-hover': {
        opacity: 1,
        visibility: 'visible',
    },
    // Optional highlight effect class target
    '&.highlight': {
        backgroundColor: alpha(theme.palette.warning.light, 0.15),
        transition: 'background-color 0.3s ease-out',
        borderRadius: theme.shape.borderRadius, // Apply radius for highlight visibility
    }
}));

// --- Avatar Container ---
export const AvatarContainer = styled(Box)({
    width: 32, // Consistent avatar size
    height: 32,
    flexShrink: 0,
    display: 'flex',
    alignItems: 'flex-end', // Align avatar itself to the bottom
});

// --- Message Content Column ---
export const MessageContent = styled(Box, {
    shouldForwardProp: (prop) => prop !== 'isSender'
})(({ theme, isSender }) => ({
    display: 'flex',
    flexDirection: 'column',
    alignItems: isSender ? 'flex-end' : 'flex-start', // Align bubble/reactions
    maxWidth: '75%', // Limit message width
    position: 'relative', // For reaction positioning if needed relative to content
}));

// --- Message Bubble ---
export const MessageBubble = styled(Paper, {
    shouldForwardProp: (prop) => prop !== 'isSender' && prop !== 'isDeleted' && prop !== 'isEditing'
})(({ theme, isSender, isDeleted, isEditing }) => ({
    padding: theme.spacing(0.8, 1.4), // Comfortable padding
    // Distinctive chat bubble radius
    borderRadius: isSender ? '20px 20px 5px 20px' : '20px 20px 20px 5px',
    // Background color logic
    backgroundColor: isDeleted
        ? 'transparent' // Deleted messages have no background
        : isEditing
            ? alpha(theme.palette.info.light, 0.15) // Subtle indicator for editing state
            : isSender
                ? (theme.palette.mode === 'dark' ? theme.palette.primary.dark : theme.palette.primary.main) // Sender color
                : theme.palette.background.paper, // Receiver color (or default paper)
    // Text color logic
    color: isDeleted
        ? theme.palette.text.disabled // Disabled color for deleted text
        : isSender
            ? theme.palette.primary.contrastText // Ensure contrast on sender bubble
            : theme.palette.text.primary, // Standard text color for receiver
    // Subtle shadow for non-deleted messages
    boxShadow: isDeleted ? 'none' : (theme.palette.mode === 'dark' ? '0 1px 2px rgba(0,0,0,0.3)' : '0 1px 2px rgba(0,0,0,0.1)'),
    // Text wrapping
    wordBreak: 'break-word',
    overflowWrap: 'break-word',
    // Style for deleted message text
    fontStyle: isDeleted ? 'italic' : 'normal',
    cursor: 'default', // Default cursor for text
    minWidth: '50px', // Ensure bubble is wide enough for timestamp
    position: 'relative', // For potential absolute positioning inside (like custom checkmarks)
    display: 'flex', // Needed for column direction of text + meta
    flexDirection: 'column',
    transition: 'background-color 0.2s ease', // Smooth background changes (e.g., for editing state)
}));

// --- Timestamp & Edited Marker Container ---
export const BubbleMeta = styled(Box)(({ theme, isSender }) => ({
    display: 'flex',
    alignItems: 'center',
    gap: theme.spacing(0.75), // Space between edited text, timestamp, checkmark
    marginTop: theme.spacing(0.5), // Space above the meta info
    alignSelf: 'flex-end', // Push meta to the bottom-right of the bubble
    // Adjust color for contrast based on bubble background
    color: isSender ? alpha(theme.palette.primary.contrastText, 0.8) : theme.palette.text.secondary,
}));

// --- Timestamp Text ---
export const TimestampText = styled(Typography)({
    fontSize: '0.7rem', // Small timestamp
    whiteSpace: 'nowrap', // Prevent timestamp from wrapping
});

// --- Edited Marker Text ---
export const EditedText = styled(Typography)(({ theme }) => ({
    fontSize: '0.7rem',
    fontStyle: 'italic',
    // Color matches the BubbleMeta for consistency
}));

// --- Hover Actions Container (React, Reply, More) ---
export const HoverActions = styled(Box)(({ theme, isSender }) => ({
    position: 'absolute',
    top: '-12px', // Position above the bubble
    // Position left for sender, right for receiver, slightly overlapping bubble
    [isSender ? 'left' : 'right']: theme.spacing(-1),
    display: 'flex',
    alignItems: 'center',
    gap: theme.spacing(0.5),
    backgroundColor: theme.palette.background.default, // Use default bg for floating feel
    borderRadius: '18px', // Rounded pill shape
    padding: theme.spacing(0.3, 0.6),
    boxShadow: theme.shadows[4], // Give it some pop
    opacity: 0, // Hidden by default
    visibility: 'hidden',
    transition: 'opacity 0.15s ease-in-out, visibility 0.15s ease-in-out',
    zIndex: 2, // Ensure it's above the message bubble
    pointerEvents: 'auto', // Allow clicks
    '& .MuiIconButton-root': {
        padding: theme.spacing(0.5), // Small icon buttons
        color: theme.palette.text.secondary,
        '&:hover': {
            backgroundColor: theme.palette.action.hover,
            color: theme.palette.text.primary,
        },
    },
    '& .MuiSvgIcon-root': {
        fontSize: '1.1rem', // Consistent icon size
    },
}));

// --- Container for Reaction Chips ---
export const ReactionChipContainer = styled(Box)(({ theme, isSender }) => ({
    marginTop: theme.spacing(0.75), // Space below the bubble
    display: 'flex',
    gap: theme.spacing(0.5), // Space between reaction chips
    flexWrap: 'wrap', // Allow chips to wrap
    justifyContent: isSender ? 'flex-end' : 'flex-start', // Align based on sender
    maxWidth: '100%', // Don't overflow the message content area
}));

// --- Individual Reaction Chip ---
export const ReactionChip = styled(Box, {
    shouldForwardProp: (prop) => prop !== 'reacted'
})(({ theme, reacted }) => ({
    display: 'inline-flex', // Use inline-flex for better alignment with content
    alignItems: 'center',
    gap: theme.spacing(0.5),
    padding: theme.spacing(0.25, 0.8), // Adjusted padding for small size
    borderRadius: '12px', // Rounded chip
    // Border indicates if current user reacted
    border: `1px solid ${reacted ? theme.palette.primary.main : theme.palette.divider}`,
    // Background indicates if current user reacted
    backgroundColor: reacted
        ? alpha(theme.palette.primary.main, 0.15)
        : alpha(theme.palette.background.paper, 0.8), // Blend slightly
    backdropFilter: 'blur(3px)', // Subtle blur effect behind chip
    cursor: 'pointer',
    fontSize: '0.8rem', // Size for the reaction count
    transition: 'background-color 0.2s, border-color 0.2s, transform 0.1s ease-out',
    '&:hover': {
        borderColor: theme.palette.primary.light,
        backgroundColor: alpha(theme.palette.primary.light, 0.2),
        transform: 'scale(1.05)', // Subtle grow effect on hover
    },
    // Target the Emoji component or span directly if needed
    '& .emoji-native': { // Class often used by emoji libraries
       fontSize: '14px', // Adjust emoji size
       verticalAlign: 'middle', // Align emoji nicely with text
       marginRight: '2px', // Space between emoji and count
    },
    // Target the Typography count span
    '& .MuiTypography-caption': {
      lineHeight: 1, // Ensure count text aligns well
    }
}));

// --- Reply Preview Snippet inside Message Bubble ---
export const ReplyInBubblePreview = styled(Box)(({ theme, isSender }) => ({
    padding: theme.spacing(0.75, 1),
    marginBottom: theme.spacing(0.75), // Space between preview and main message text
    // Border indicates it's a reply, color matches bubble context
    borderLeft: `3px solid ${isSender ? alpha(theme.palette.common.white, 0.6) : theme.palette.primary.main}`,
    backgroundColor: alpha(theme.palette.text.primary, 0.07), // Subtle background tint
    borderRadius: '4px',
    cursor: 'pointer', // Indicate it's clickable
    '&:hover': {
        backgroundColor: alpha(theme.palette.text.primary, 0.1), // Darken slightly on hover
    },
    overflow: 'hidden', // Ensure text ellipsis works
}));

// --- Reply Preview Above Input Area ---
export const ReplyInputPreview = styled(Paper)(({ theme }) => ({
    padding: theme.spacing(1, 1.5),
    // Use slightly tinted paper background
    backgroundColor: alpha(theme.palette.background.paper, 0.9),
    borderTop: `1px solid ${theme.palette.divider}`, // Separator line
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    fontSize: '0.8rem',
    borderBottomLeftRadius: 0, // Connect visually with input area below
    borderBottomRightRadius: 0,
    boxShadow: 'none', // No shadow needed here
    flexShrink: 0, // Prevent shrinking
}));

// --- Main Input Area Container ---
export const InputArea = styled(Paper)(({ theme }) => ({
    padding: theme.spacing(1, 1.5, 1.5), // Add bottom padding for visual balance
    flexShrink: 0, // Prevent shrinking
    backgroundColor: theme.palette.background.paper,
    borderTop: `1px solid ${theme.palette.divider}`, // Separator line if no ReplyPreview is shown
    borderBottomLeftRadius: 'inherit', // Match parent ChatWrapper radius
    borderBottomRightRadius: 'inherit',
    boxShadow: 'none', // No separate shadow
}));

// --- Main Text Input Field ---
export const InputTextField = styled(TextField)(({ theme }) => ({
    '& .MuiOutlinedInput-root': {
        borderRadius: '20px', // Consistent rounded shape
        backgroundColor: theme.palette.background.default, // Use default bg, less contrast
        paddingRight: theme.spacing(0.5), // Space for send button if inside adornment (now outside)
        '& fieldset': {
            border: 'none', // Cleaner look, rely on background contrast
        },
        '&:hover fieldset': {
            border: 'none',
        },
        '&.Mui-focused fieldset': {
            border: 'none',
        },
        // Add focus ring manually for accessibility since border is removed
         '&.Mui-focused': {
            outline: `2px solid ${theme.palette.primary.main}`,
            outlineOffset: '1px',
         }
    },
    // Style the actual input element
    '& .MuiInputBase-input': {
        padding: theme.spacing(1.25, 0), // Adjust vertical padding as needed
        paddingLeft: theme.spacing(1.5), // Left padding for text
        maxHeight: '80px', // Limit text area growth
        overflowY: 'auto !important', // Ensure scrollbar appears if needed
        // Customize scrollbar for the input itself
        '&::-webkit-scrollbar': { width: '5px' },
        '&::-webkit-scrollbar-track': { background: 'transparent' },
        '&::-webkit-scrollbar-thumb': { background: theme.palette.action.disabled, borderRadius: '3px' },
    },
}));

// --- Container for Edit Input Field ---
export const EditInputWrapper = styled(Box)(({ theme }) => ({
    display: 'flex',
    flexDirection: 'column',
    gap: theme.spacing(0.5),
    width: '100%', // Take full width of the bubble space it replaces
}));

// --- Date Separator Container ---
export const DateSeparator = styled(Box)(({ theme }) => ({
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    padding: theme.spacing(1.5, 0), // Vertical space around the date chip
}));

// --- Date Separator Chip ---
export const DateChip = styled(Chip)(({ theme }) => ({
    padding: theme.spacing(0.25, 1),
    height: 'auto', // Let content define height
    fontSize: '0.7rem',
    fontWeight: 500,
    color: theme.palette.text.secondary,
    backgroundColor: alpha(theme.palette.background.default, 0.7), // Blend with background
    backdropFilter: 'blur(3px)', // Subtle blur effect
    '& .MuiChip-label': { // Target the label specifically if needed
        padding: 0, // Remove default chip label padding if needed
    }
}));