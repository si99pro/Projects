{"version":3,"file":"static/js/682.2c72c16a.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Send.js","components/NotificationForm.js","../node_modules/@mui/material/esm/AlertTitle/alertTitleClasses.js","../node_modules/@mui/material/esm/AlertTitle/AlertTitle.js","pages/Admin.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');","/* eslint-disable no-unused-vars */\r\n// src/components/NotificationForm.js\r\nimport React, { useState, useCallback } from 'react';\r\nimport { db, auth } from '../firebase';\r\nimport {\r\n    collection,\r\n    doc,\r\n    addDoc,\r\n    serverTimestamp,\r\n    writeBatch,\r\n    query,\r\n    where,\r\n    getDocs\r\n} from 'firebase/firestore';\r\n// --- CORRECTED IMPORT PATH FOR useAuth ---\r\nimport { useAuth } from '../auth/AuthContext';\r\n// --- END CORRECTION ---\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Grid,\r\n    Typography,\r\n    CircularProgress,\r\n    Alert,\r\n    Stack,\r\n    Snackbar,\r\n    InputAdornment,\r\n    FormHelperText,\r\n} from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\n\r\n// --- Constants ---\r\nconst notificationCategories = [\r\n    { value: 'general', label: 'General' },\r\n    { value: 'academic', label: 'Academic' },\r\n    { value: 'discussion', label: 'Discussion' },\r\n    { value: 'important', label: 'Important' },\r\n    { value: 'event', label: 'Event' },\r\n    { value: 'other', label: 'Other' },\r\n];\r\n\r\nconst URL_REGEX = /^https?:\\/\\/[^\\s/$.?#].[^\\s]*$/i;\r\nconst NOTIFICATIONS_COLLECTION = 'notifications'; // Top-level collection (optional, for audit)\r\nconst USERS_COLLECTION = 'users';\r\nconst USER_NOTIFICATIONS_SUBCOLLECTION = 'notifications'; // Subcollection name under each user\r\n\r\n// --- Component ---\r\nfunction NotificationForm() {\r\n    // Use the correctly imported useAuth hook\r\n    const { user, isAdmin, userProfile, authLoading } = useAuth();\r\n    const adminBatchYear = userProfile?.basicInfo?.batch;\r\n    const senderStudentIdValue = userProfile?.basicInfo?.studentId;\r\n\r\n    // --- State ---\r\n    const [formData, setFormData] = useState({\r\n        title: '',\r\n        message: '',\r\n        link: '',\r\n        audience: 'private', // Default remains private\r\n        category: 'general',\r\n    });\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    const [submitStatus, setSubmitStatus] = useState({ error: null, success: null });\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n    // --- Validation Logic (Unchanged) ---\r\n    const validateField = useCallback((name, value) => {\r\n        let error = undefined;\r\n        switch (name) {\r\n            case 'title':\r\n                if (!value.trim()) error = 'Title is required.';\r\n                break;\r\n            case 'message':\r\n                if (!value.trim()) error = 'Message is required.';\r\n                break;\r\n            case 'link':\r\n                if (value.trim() && !URL_REGEX.test(value.trim())) {\r\n                    error = 'Must be a valid URL (e.g., https://example.com)';\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return error;\r\n    }, []);\r\n\r\n    const validateForm = useCallback(() => {\r\n        const errors = {};\r\n        let isValid = true;\r\n        const currentFormData = formData;\r\n\r\n        const fieldsToValidate = ['title', 'message', 'link', 'category', 'audience'];\r\n        for (const key of fieldsToValidate) {\r\n            const value = currentFormData[key];\r\n            const error = validateField(key, value);\r\n            if (error) {\r\n                errors[key] = error;\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        // Specific validation for audience based on admin status and profile info\r\n        if (currentFormData.audience === 'private') {\r\n            if (authLoading) {\r\n                errors.audience = \"Verifying admin permissions...\"; // User needs to wait\r\n                isValid = false;\r\n            } else if (!isAdmin) {\r\n                errors.audience = \"Private option disabled: Admin role required.\";\r\n                isValid = false;\r\n            } else if (!adminBatchYear) {\r\n                // Admin, but missing batch info needed for private targeting\r\n                errors.audience = \"Private option disabled: Your batch info is missing in your profile.\";\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        setFormErrors(errors);\r\n        return isValid;\r\n    }, [formData, validateField, isAdmin, adminBatchYear, authLoading]);\r\n\r\n    // --- Event Handlers (Unchanged) ---\r\n    const handleInputChange = useCallback((event) => {\r\n        const { name, value } = event.target;\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n        // Clear error for the specific field being changed\r\n        if (formErrors[name]) {\r\n            setFormErrors(prev => ({ ...prev, [name]: undefined }));\r\n        }\r\n        // Clear audience error if audience itself is changed\r\n        if (name === 'audience' && formErrors.audience) {\r\n            setFormErrors(prev => ({ ...prev, audience: undefined }));\r\n        }\r\n        // Clear submission status on input change\r\n        setSubmitStatus({ error: null, success: null });\r\n    }, [formErrors]);\r\n\r\n    const handleBlur = useCallback((event) => {\r\n        const { name, value } = event.target;\r\n        const error = validateField(name, value);\r\n        setFormErrors(prev => ({ ...prev, [name]: error }));\r\n    }, [validateField]);\r\n\r\n    const handleSnackbarClose = useCallback((event, reason) => {\r\n        if (reason === 'clickaway') return;\r\n        setSnackbarOpen(false);\r\n    }, []);\r\n\r\n\r\n    // --- Function to DISTRIBUTE notification data + initial state to user subcollections ---\r\n    const distributeNotificationToUsers = async (notificationId, notificationData, audienceType, audienceTarget) => {\r\n        // Initial state for each user's copy of the notification\r\n        const initialState = {\r\n            read: false,\r\n            createdAt: serverTimestamp(), // When the notification reached the user's subcollection\r\n            readTimestamp: null,\r\n            reacted: null,\r\n            commented: false,\r\n            shared: false\r\n        };\r\n\r\n        const usersToNotify = [];\r\n        const usersRef = collection(db, USERS_COLLECTION);\r\n\r\n        try {\r\n            if (audienceType === 'public') {\r\n                console.log(\"Fetching all users for PUBLIC audience distribution...\");\r\n                // Consider alternatives for large user bases (e.g., Cloud Functions triggered by the top-level doc)\r\n                const allUsersSnapshot = await getDocs(usersRef);\r\n                allUsersSnapshot.forEach(doc => usersToNotify.push(doc.id));\r\n                console.log(`Found ${usersToNotify.length} users for public notification distribution.`);\r\n\r\n            } else if (audienceType === 'private' && audienceTarget) {\r\n                console.log(`Fetching users for PRIVATE batch '${audienceTarget}' distribution...`);\r\n                const q = query(usersRef, where('basicInfo.batch', '==', audienceTarget));\r\n                const batchUsersSnapshot = await getDocs(q);\r\n                batchUsersSnapshot.forEach(doc => usersToNotify.push(doc.id));\r\n                console.log(`Found ${usersToNotify.length} users in batch ${audienceTarget}.`);\r\n\r\n            } else {\r\n                console.log(\"No specific audience matched for distribution.\");\r\n                return; // Or throw an error if this case shouldn't happen\r\n            }\r\n\r\n            if (usersToNotify.length === 0) {\r\n                console.log(\"No users found for the specified audience.\");\r\n                // Maybe set a specific status message for the user?\r\n                return;\r\n            }\r\n\r\n            // Use a batch for efficient writes\r\n            const batch = writeBatch(db);\r\n            usersToNotify.forEach(userId => {\r\n                const userNotificationRef = doc(db, USERS_COLLECTION, userId, USER_NOTIFICATIONS_SUBCOLLECTION, notificationId);\r\n                const userNotificationPayload = {\r\n                    ...notificationData, // Original notification content\r\n                    ...initialState      // User-specific initial state\r\n                };\r\n                batch.set(userNotificationRef, userNotificationPayload);\r\n            });\r\n\r\n            await batch.commit();\r\n            console.log(`Successfully distributed notification ${notificationId} to ${usersToNotify.length} users.`);\r\n\r\n        } catch (error) {\r\n            console.error(`Error distributing notification ${notificationId} to users:`, error);\r\n            throw new Error(`Failed to distribute notification to users. ${error.message}`);\r\n        }\r\n    };\r\n\r\n\r\n    // --- Form Submission Handler ---\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setSubmitStatus({ error: null, success: null }); // Clear previous status\r\n\r\n        if (!validateForm()) {\r\n            console.log(\"Form validation failed\", formErrors);\r\n            return; // Stop submission if form is invalid\r\n        }\r\n\r\n        setLoading(true);\r\n        const currentUser = auth.currentUser;\r\n\r\n        // Double-check user authentication (should be handled by routing, but belt-and-suspenders)\r\n        if (!currentUser) {\r\n            setSubmitStatus({ error: \"Authentication error. Please log in again.\", success: null });\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const targetBatch = formData.audience === 'private' ? adminBatchYear : null;\r\n        const senderNameValue = userProfile?.basicInfo?.fullName || currentUser.displayName || 'Admin';\r\n        // Map internal state ('private'/'everyone') to Firestore values ('private'/'public')\r\n        const audienceTypeValue = formData.audience === 'private' ? 'private' : 'public';\r\n\r\n        let mainNotificationDocRef = null; // To store the ref of the optional top-level doc\r\n\r\n        try {\r\n            // 1. Construct the core notification data object\r\n            const notificationData = {\r\n                title: formData.title.trim(),\r\n                message: formData.message.trim(),\r\n                category: formData.category,\r\n                audienceType: audienceTypeValue,\r\n                // Only include audienceTarget if it's a private notification with a valid target batch\r\n                ...(audienceTypeValue === 'private' && targetBatch && { audienceTarget: targetBatch }),\r\n                // Include sender details\r\n                senderName: senderNameValue,\r\n                senderStudentId: senderStudentIdValue || null, // Store sender's student ID if available\r\n                timestamp: serverTimestamp(), // Timestamp when the notification was *sent*\r\n                // Include link only if provided\r\n                ...(formData.link.trim() && { link: formData.link.trim() }),\r\n            };\r\n\r\n            console.log(\"Constructed notification data:\", notificationData);\r\n\r\n            // 2. (Optional but Recommended for Audit/Functions) Add to top-level 'notifications' collection\r\n            // This gives you a single place to view all sent notifications and potentially trigger functions.\r\n            // If you *only* want user subcollections, generate an ID first, then call distribute.\r\n            mainNotificationDocRef = await addDoc(collection(db, NOTIFICATIONS_COLLECTION), notificationData);\r\n            const newNotificationId = mainNotificationDocRef.id; // Get the ID generated by Firestore\r\n            console.log(\"Main (audit) notification document created with ID:\", newNotificationId);\r\n\r\n            // 3. Distribute the notification to target user subcollections\r\n            console.log(`Distributing notification ${newNotificationId} to users...`);\r\n            await distributeNotificationToUsers(\r\n                newNotificationId,      // Use the SAME ID for consistency\r\n                notificationData,       // Pass the notification content\r\n                audienceTypeValue,      // 'private' or 'public'\r\n                audienceTypeValue === 'private' ? targetBatch : null // Pass target only if private\r\n            );\r\n\r\n            // 4. Success: Reset form and show success message\r\n            setFormData({\r\n                title: '', message: '', link: '',\r\n                audience: 'private', // Reset to default\r\n                category: 'general'  // Reset to default\r\n            });\r\n            setFormErrors({});\r\n            setSubmitStatus({ error: null, success: \"Notification sent successfully!\" });\r\n            setSnackbarOpen(true);\r\n\r\n        } catch (err) {\r\n            console.error(\"Error during notification submission:\", err);\r\n            // Provide more specific feedback based on where the error might have occurred\r\n            if (mainNotificationDocRef && err.message.includes(\"Failed to distribute\")) {\r\n                setSubmitStatus({ error: `Notification created (ID: ${mainNotificationDocRef.id}) but failed to distribute. ${err.message}`, success: null });\r\n            } else if (!mainNotificationDocRef) {\r\n                setSubmitStatus({ error: `Failed to create the notification document. ${err.message}`, success: null });\r\n            } else {\r\n                // Generic error\r\n                setSubmitStatus({ error: `An unexpected error occurred: ${err.message}`, success: null });\r\n            }\r\n        } finally {\r\n            setLoading(false); // Ensure loading state is always turned off\r\n        }\r\n    };\r\n\r\n\r\n    // --- Render Logic ---\r\n    // Determine if the 'private' option should be disabled and why\r\n    const isPrivateOptionDisabled = authLoading || !isAdmin || (isAdmin && !adminBatchYear);\r\n    const privateDisabledReasonText = (!authLoading && !isAdmin)\r\n        ? \"Admin role required to send private messages.\"\r\n        : (!authLoading && isAdmin && !adminBatchYear)\r\n        ? \"Your batch info is missing in profile.\"\r\n        : \"\";\r\n\r\n    // Determine the helper text for the Audience dropdown\r\n    let audienceHelperText = \"\";\r\n    if (formErrors.audience) {\r\n        audienceHelperText = formErrors.audience; // Show specific validation error first\r\n    } else if (formData.audience === 'private' && isPrivateOptionDisabled) {\r\n        audienceHelperText = privateDisabledReasonText; // Show why it's disabled\r\n    } else if (formData.audience === 'private' && !isPrivateOptionDisabled) {\r\n        audienceHelperText = `Will be sent privately to batch ${adminBatchYear}.`; // Confirm target batch\r\n    } else if (formData.audience === 'everyone') {\r\n        audienceHelperText = \"Will be sent publicly to all users.\";\r\n    }\r\n\r\n    // --- JSX ---\r\n    return (\r\n        <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1, maxWidth: 700, mx: 'auto' }}>\r\n            {/* Show loading spinner only if authentication is still loading initially */}\r\n            {authLoading && (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', my: 5 }}>\r\n                    <CircularProgress />\r\n                    <Typography sx={{ ml: 2 }}>Verifying permissions...</Typography>\r\n                </Box>\r\n            )}\r\n\r\n            {/* Render form only after initial auth check is done */}\r\n            {!authLoading && (\r\n                <>\r\n                    <Typography variant=\"h6\" gutterBottom sx={{ mb: 3 }}>\r\n                        Send New Notification\r\n                    </Typography>\r\n\r\n                    <Stack spacing={3}>\r\n                        {/* Display submission errors */}\r\n                        {submitStatus.error && (\r\n                            <Alert severity=\"error\" onClose={() => setSubmitStatus(prev => ({ ...prev, error: null }))}>\r\n                                {submitStatus.error}\r\n                            </Alert>\r\n                        )}\r\n\r\n                        <TextField\r\n                            required fullWidth id=\"title\" name=\"title\" label=\"Notification Title\"\r\n                            value={formData.title} onChange={handleInputChange} onBlur={handleBlur}\r\n                            error={!!formErrors.title} helperText={formErrors.title || ' '} // Add space to prevent layout jumps\r\n                            disabled={loading} autoFocus\r\n                        />\r\n\r\n                        <TextField\r\n                            required fullWidth id=\"message\" name=\"message\" label=\"Notification Message\"\r\n                            multiline rows={4} value={formData.message} onChange={handleInputChange} onBlur={handleBlur}\r\n                            error={!!formErrors.message} helperText={formErrors.message || ' '}\r\n                            disabled={loading}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth id=\"link\" name=\"link\" label=\"Optional Link (URL)\"\r\n                            placeholder=\"https://example.com\" value={formData.link} onChange={handleInputChange} onBlur={handleBlur}\r\n                            error={!!formErrors.link} helperText={formErrors.link || ' '}\r\n                            disabled={loading}\r\n                            InputProps={{\r\n                                startAdornment: (<InputAdornment position=\"start\"><LinkIcon color=\"action\" /></InputAdornment>),\r\n                            }}\r\n                        />\r\n\r\n                        <Grid container spacing={2} alignItems=\"flex-start\">\r\n                            <Grid item xs={12} sm={6}>\r\n                                <FormControl fullWidth required error={!!formErrors.category} disabled={loading}>\r\n                                    <InputLabel id=\"category-select-label\">Category</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"category-select-label\" id=\"category-select\" name=\"category\"\r\n                                        value={formData.category} label=\"Category\" onChange={handleInputChange}\r\n                                    >\r\n                                        {notificationCategories.map((cat) => (\r\n                                            <MenuItem key={cat.value} value={cat.value}>{cat.label}</MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                    {/* Add space for helper text consistency */}\r\n                                    <FormHelperText> </FormHelperText>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={6}>\r\n                                <FormControl fullWidth required error={!!formErrors.audience} disabled={loading}>\r\n                                    <InputLabel id=\"audience-select-label\">Audience</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"audience-select-label\" id=\"audience-select\" name=\"audience\"\r\n                                        value={formData.audience} label=\"Audience\" onChange={handleInputChange}\r\n                                    >\r\n                                        {/* Disable private option based on calculated state */}\r\n                                        <MenuItem key=\"private\" value=\"private\" disabled={isPrivateOptionDisabled}>\r\n                                            Private (Your Batch)\r\n                                        </MenuItem>\r\n                                        <MenuItem key=\"everyone\" value=\"everyone\">\r\n                                            Public (Everyone)\r\n                                        </MenuItem>\r\n                                    </Select>\r\n                                    {/* Display dynamic helper text */}\r\n                                    <FormHelperText>{audienceHelperText || ' '}</FormHelperText>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n                            <Button\r\n                                type=\"submit\" variant=\"contained\" disabled={loading}\r\n                                startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <SendIcon />}\r\n                                sx={{ minWidth: 150 }}\r\n                            >\r\n                                {loading ? 'Sending...' : 'Send Notification'}\r\n                            </Button>\r\n                        </Box>\r\n                    </Stack>\r\n                </>\r\n            )}\r\n\r\n            {/* Snackbar for success messages */}\r\n            <Snackbar\r\n                open={snackbarOpen} autoHideDuration={5000} onClose={handleSnackbarClose}\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n            >\r\n                {/* Ensure Alert is only rendered when there's a success message */}\r\n                {submitStatus.success ? (\r\n                    <Alert onClose={handleSnackbarClose} severity=\"success\" variant=\"filled\" sx={{ width: '100%' }}>\r\n                        {submitStatus.success}\r\n                    </Alert>\r\n                ) : undefined /* Render nothing otherwise */}\r\n            </Snackbar>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default NotificationForm;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAlertTitleUtilityClass(slot) {\n  return generateUtilityClass('MuiAlertTitle', slot);\n}\nconst alertTitleClasses = generateUtilityClasses('MuiAlertTitle', ['root']);\nexport default alertTitleClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport { getAlertTitleUtilityClass } from \"./alertTitleClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getAlertTitleUtilityClass, classes);\n};\nconst AlertTitleRoot = styled(Typography, {\n  name: 'MuiAlertTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(memoTheme(({\n  theme\n}) => {\n  return {\n    fontWeight: theme.typography.fontWeightMedium,\n    marginTop: -2\n  };\n}));\nconst AlertTitle = /*#__PURE__*/React.forwardRef(function AlertTitle(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAlertTitle'\n  });\n  const {\n    className,\n    ...other\n  } = props;\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(AlertTitleRoot, {\n    gutterBottom: true,\n    component: \"div\",\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className),\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? AlertTitle.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default AlertTitle;","// src/pages/Admin.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// --- CORRECTED IMPORT PATH FOR useAuth ---\r\nimport { useAuth } from '../auth/AuthContext';\r\n// --- END CORRECTION ---\r\nimport NotificationForm from '../components/NotificationForm'; // Assuming this will be updated separately\r\n\r\nimport {\r\n    Container,\r\n    Paper,\r\n    Typography,\r\n    Box,\r\n    CircularProgress,\r\n    Alert,\r\n    AlertTitle,\r\n    Divider,\r\n} from '@mui/material';\r\nimport AdminPanelSettingsIcon from '@mui/icons-material/AdminPanelSettings'; // Icon for visual cue\r\n\r\nfunction Admin() {\r\n    // Use the correctly imported useAuth hook\r\n    const { user, roles, authLoading } = useAuth(); // Destructure 'authLoading' as provided by context\r\n    const navigate = useNavigate();\r\n    const [isCheckingRoles, setIsCheckingRoles] = useState(true); // Separate state for role check completion\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Redirect if not logged in (and auth state is determined)\r\n        if (!authLoading && !user) {\r\n            console.log(\"Admin Page: No user found, navigating to login.\");\r\n            navigate('/login');\r\n            return; // Stop further execution in this effect run\r\n        }\r\n\r\n        // Once auth loading is done and user exists, check roles\r\n        if (!authLoading && user) {\r\n            console.log(\"Admin Page: User found, checking roles:\", roles);\r\n            // The roles variable from useAuth now directly reflects userProfile.roles\r\n            // It could be undefined initially, null if profile doesn't exist, or an array.\r\n            if (roles === undefined && authLoading) { // Check if still waiting on initial load\r\n                console.log(\"Admin Page: Auth/Roles still loading...\");\r\n                setIsCheckingRoles(true); // Keep checking\r\n            } else {\r\n                 // Roles *should* be available now (even if null or empty array)\r\n                const hasAdminRole = Array.isArray(roles) && roles.includes('admin');\r\n                console.log(\"Admin Page: Has admin role?\", hasAdminRole);\r\n                setIsAdmin(hasAdminRole);\r\n                setIsCheckingRoles(false); // Role check is complete\r\n            }\r\n        } else {\r\n            // Still loading auth or no user yet\r\n            setIsCheckingRoles(true);\r\n        }\r\n\r\n    }, [user, roles, authLoading, navigate]);\r\n\r\n    // --- Loading State ---\r\n    // Show loading indicator while auth is loading OR roles are being definitively checked\r\n    if (authLoading || isCheckingRoles) {\r\n        return (\r\n            <Container maxWidth=\"sm\" sx={{ mt: 4, textAlign: 'center' }}>\r\n                <CircularProgress />\r\n                <Typography sx={{ mt: 2 }}>Loading Admin Panel...</Typography>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    // --- Render based on Admin status ---\r\n    return (\r\n        <Container maxWidth=\"md\" sx={{ mt: 4, mb: 4 }}>\r\n            <Paper elevation={3} sx={{ p: { xs: 2, md: 4 } }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                    <AdminPanelSettingsIcon color=\"primary\" sx={{ mr: 1.5, fontSize: '2rem' }} />\r\n                    <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ mb: 0 }}>\r\n                        Admin Panel\r\n                    </Typography>\r\n                </Box>\r\n                <Divider sx={{ mb: 3 }} />\r\n\r\n                {isAdmin ? (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                            Use the form below to send notifications to users. Select the target audience and category appropriately.\r\n                        </Typography>\r\n                        {/* The NotificationForm will contain the new dropdowns */}\r\n                        <NotificationForm />\r\n                    </>\r\n                ) : (\r\n                    <Alert severity=\"error\">\r\n                        <AlertTitle>Access Denied</AlertTitle>\r\n                        You do not have permission to view this page. Please ensure you are logged in with an administrator account.\r\n                    </Alert>\r\n                )}\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Admin;"],"names":["createSvgIcon","_jsx","d","notificationCategories","value","label","URL_REGEX","USERS_COLLECTION","_userProfile$basicInf","_userProfile$basicInf2","user","isAdmin","userProfile","authLoading","useAuth","adminBatchYear","basicInfo","batch","senderStudentIdValue","studentId","formData","setFormData","useState","title","message","link","audience","category","formErrors","setFormErrors","loading","setLoading","submitStatus","setSubmitStatus","error","success","snackbarOpen","setSnackbarOpen","validateField","useCallback","name","trim","test","validateForm","errors","isValid","currentFormData","fieldsToValidate","key","handleInputChange","event","target","prev","undefined","handleBlur","handleSnackbarClose","reason","isPrivateOptionDisabled","privateDisabledReasonText","audienceHelperText","_jsxs","Box","component","onSubmit","async","_userProfile$basicInf3","preventDefault","console","log","currentUser","auth","targetBatch","senderNameValue","fullName","displayName","audienceTypeValue","mainNotificationDocRef","notificationData","audienceType","audienceTarget","senderName","senderStudentId","timestamp","serverTimestamp","addDoc","collection","db","newNotificationId","id","notificationId","initialState","read","createdAt","readTimestamp","reacted","commented","shared","usersToNotify","usersRef","getDocs","forEach","doc","push","length","q","query","where","writeBatch","userId","userNotificationRef","userNotificationPayload","set","commit","Error","distributeNotificationToUsers","err","includes","noValidate","sx","mt","maxWidth","mx","children","display","justifyContent","my","CircularProgress","Typography","ml","_Fragment","variant","gutterBottom","mb","Stack","spacing","Alert","severity","onClose","TextField","required","fullWidth","onChange","onBlur","helperText","disabled","autoFocus","multiline","rows","placeholder","InputProps","startAdornment","InputAdornment","position","LinkIcon","color","Grid","container","alignItems","item","xs","sm","FormControl","InputLabel","Select","labelId","map","cat","MenuItem","FormHelperText","Button","type","startIcon","size","SendIcon","minWidth","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","width","getAlertTitleUtilityClass","slot","generateUtilityClass","generateUtilityClasses","AlertTitleRoot","styled","overridesResolver","props","styles","root","memoTheme","_ref","theme","fontWeight","typography","fontWeightMedium","marginTop","React","inProps","ref","useDefaultProps","className","other","ownerState","classes","composeClasses","useUtilityClasses","clsx","roles","navigate","useNavigate","isCheckingRoles","setIsCheckingRoles","setIsAdmin","useEffect","hasAdminRole","Array","isArray","Container","textAlign","Paper","elevation","p","md","AdminPanelSettingsIcon","mr","fontSize","Divider","NotificationForm","AlertTitle"],"sourceRoot":""}